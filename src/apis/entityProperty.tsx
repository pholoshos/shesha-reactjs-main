/* Generated by restful-react */

import React from 'react';
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from 'restful-react';

import * as RestfulShesha from '../utils/fetchers';
export const SPEC_VERSION = 'v1';
/**
 * Indicate the source of the entity/property metadata
 */
export type MetadataSourceType = 1 | 2;

/**
 * Entity property DTO
 */
export interface EntityPropertyDto {
  id?: string;
  /**
   * Property Name
   */
  name?: string | null;
  /**
   * Label (display name)
   */
  label?: string | null;
  /**
   * Description
   */
  description?: string | null;
  /**
   * Data type
   */
  dataType?: string | null;
  /**
   * Data format
   */
  dataFormat?: string | null;
  /**
   * Entity type. Aplicable for entity references
   */
  entityType?: string | null;
  /**
   * Reference list name
   */
  referenceListName?: string | null;
  /**
   * Reference list namespace
   */
  referenceListNamespace?: string | null;
  source?: MetadataSourceType;
  /**
   * Child properties, applicable for complex data types (e.g. object, array)
   */
  properties?: EntityPropertyDto[] | null;
}

export interface ValidationErrorInfo {
  message?: string | null;
  members?: string[] | null;
}

export interface ErrorInfo {
  code?: number;
  message?: string | null;
  details?: string | null;
  validationErrors?: ValidationErrorInfo[] | null;
}

export interface EntityPropertyDtoAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: EntityPropertyDto;
}

export interface AjaxResponseBase {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
}

export interface EntityPropertyDtoPagedResultDto {
  items?: EntityPropertyDto[] | null;
  totalCount?: number;
}

export interface EntityPropertyDtoPagedResultDtoAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: EntityPropertyDtoPagedResultDto;
}

export interface EntityPropertyGetQueryParams {
  id?: string;
}

export type EntityPropertyGetProps = Omit<
  GetProps<EntityPropertyDtoAjaxResponse, AjaxResponseBase, EntityPropertyGetQueryParams, void>,
  'path'
>;

export const EntityPropertyGet = (props: EntityPropertyGetProps) => (
  <Get<EntityPropertyDtoAjaxResponse, AjaxResponseBase, EntityPropertyGetQueryParams, void>
    path={`/api/services/app/EntityProperty/Get`}
    {...props}
  />
);

export type UseEntityPropertyGetProps = Omit<
  UseGetProps<EntityPropertyDtoAjaxResponse, AjaxResponseBase, EntityPropertyGetQueryParams, void>,
  'path'
>;

export const useEntityPropertyGet = (props: UseEntityPropertyGetProps) =>
  useGet<EntityPropertyDtoAjaxResponse, AjaxResponseBase, EntityPropertyGetQueryParams, void>(
    `/api/services/app/EntityProperty/Get`,
    props
  );

export type entityPropertyGetProps = Omit<
  RestfulShesha.GetProps<EntityPropertyDtoAjaxResponse, AjaxResponseBase, EntityPropertyGetQueryParams, void>,
  'queryParams'
>;
export const entityPropertyGet = (queryParams: EntityPropertyGetQueryParams, props: entityPropertyGetProps) =>
  RestfulShesha.get<EntityPropertyDtoAjaxResponse, AjaxResponseBase, EntityPropertyGetQueryParams, void>(
    `/api/services/app/EntityProperty/Get`,
    queryParams,
    props
  );

export interface EntityPropertyGetAllQueryParams {
  sorting?: string | null;
  skipCount?: number;
  maxResultCount?: number;
}

export type EntityPropertyGetAllProps = Omit<
  GetProps<EntityPropertyDtoPagedResultDtoAjaxResponse, AjaxResponseBase, EntityPropertyGetAllQueryParams, void>,
  'path'
>;

export const EntityPropertyGetAll = (props: EntityPropertyGetAllProps) => (
  <Get<EntityPropertyDtoPagedResultDtoAjaxResponse, AjaxResponseBase, EntityPropertyGetAllQueryParams, void>
    path={`/api/services/app/EntityProperty/GetAll`}
    {...props}
  />
);

export type UseEntityPropertyGetAllProps = Omit<
  UseGetProps<EntityPropertyDtoPagedResultDtoAjaxResponse, AjaxResponseBase, EntityPropertyGetAllQueryParams, void>,
  'path'
>;

export const useEntityPropertyGetAll = (props: UseEntityPropertyGetAllProps) =>
  useGet<EntityPropertyDtoPagedResultDtoAjaxResponse, AjaxResponseBase, EntityPropertyGetAllQueryParams, void>(
    `/api/services/app/EntityProperty/GetAll`,
    props
  );

export type entityPropertyGetAllProps = Omit<
  RestfulShesha.GetProps<
    EntityPropertyDtoPagedResultDtoAjaxResponse,
    AjaxResponseBase,
    EntityPropertyGetAllQueryParams,
    void
  >,
  'queryParams'
>;
export const entityPropertyGetAll = (queryParams: EntityPropertyGetAllQueryParams, props: entityPropertyGetAllProps) =>
  RestfulShesha.get<
    EntityPropertyDtoPagedResultDtoAjaxResponse,
    AjaxResponseBase,
    EntityPropertyGetAllQueryParams,
    void
  >(`/api/services/app/EntityProperty/GetAll`, queryParams, props);

export type EntityPropertyCreateProps = Omit<
  MutateProps<EntityPropertyDtoAjaxResponse, AjaxResponseBase, void, EntityPropertyDto, void>,
  'path' | 'verb'
>;

export const EntityPropertyCreate = (props: EntityPropertyCreateProps) => (
  <Mutate<EntityPropertyDtoAjaxResponse, AjaxResponseBase, void, EntityPropertyDto, void>
    verb="POST"
    path={`/api/services/app/EntityProperty/Create`}
    {...props}
  />
);

export type UseEntityPropertyCreateProps = Omit<
  UseMutateProps<EntityPropertyDtoAjaxResponse, AjaxResponseBase, void, EntityPropertyDto, void>,
  'path' | 'verb'
>;

export const useEntityPropertyCreate = (props: UseEntityPropertyCreateProps) =>
  useMutate<EntityPropertyDtoAjaxResponse, AjaxResponseBase, void, EntityPropertyDto, void>(
    'POST',
    `/api/services/app/EntityProperty/Create`,
    props
  );

export type entityPropertyCreateProps = Omit<
  RestfulShesha.MutateProps<EntityPropertyDtoAjaxResponse, AjaxResponseBase, void, EntityPropertyDto, void>,
  'data'
>;
export const entityPropertyCreate = (data: EntityPropertyDto, props: entityPropertyCreateProps) =>
  RestfulShesha.mutate<EntityPropertyDtoAjaxResponse, AjaxResponseBase, void, EntityPropertyDto, void>(
    'POST',
    `/api/services/app/EntityProperty/Create`,
    data,
    props
  );

export type EntityPropertyUpdateProps = Omit<
  MutateProps<EntityPropertyDtoAjaxResponse, AjaxResponseBase, void, EntityPropertyDto, void>,
  'path' | 'verb'
>;

export const EntityPropertyUpdate = (props: EntityPropertyUpdateProps) => (
  <Mutate<EntityPropertyDtoAjaxResponse, AjaxResponseBase, void, EntityPropertyDto, void>
    verb="PUT"
    path={`/api/services/app/EntityProperty/Update`}
    {...props}
  />
);

export type UseEntityPropertyUpdateProps = Omit<
  UseMutateProps<EntityPropertyDtoAjaxResponse, AjaxResponseBase, void, EntityPropertyDto, void>,
  'path' | 'verb'
>;

export const useEntityPropertyUpdate = (props: UseEntityPropertyUpdateProps) =>
  useMutate<EntityPropertyDtoAjaxResponse, AjaxResponseBase, void, EntityPropertyDto, void>(
    'PUT',
    `/api/services/app/EntityProperty/Update`,
    props
  );

export type entityPropertyUpdateProps = Omit<
  RestfulShesha.MutateProps<EntityPropertyDtoAjaxResponse, AjaxResponseBase, void, EntityPropertyDto, void>,
  'data'
>;
export const entityPropertyUpdate = (data: EntityPropertyDto, props: entityPropertyUpdateProps) =>
  RestfulShesha.mutate<EntityPropertyDtoAjaxResponse, AjaxResponseBase, void, EntityPropertyDto, void>(
    'PUT',
    `/api/services/app/EntityProperty/Update`,
    data,
    props
  );

export interface EntityPropertyDeleteQueryParams {
  id?: string;
}

export type EntityPropertyDeleteProps = Omit<
  MutateProps<void, unknown, EntityPropertyDeleteQueryParams, void, void>,
  'path' | 'verb'
>;

export const EntityPropertyDelete = (props: EntityPropertyDeleteProps) => (
  <Mutate<void, unknown, EntityPropertyDeleteQueryParams, void, void>
    verb="DELETE"
    path={`/api/services/app/EntityProperty/Delete`}
    {...props}
  />
);

export type UseEntityPropertyDeleteProps = Omit<
  UseMutateProps<void, unknown, EntityPropertyDeleteQueryParams, void, void>,
  'path' | 'verb'
>;

export const useEntityPropertyDelete = (props: UseEntityPropertyDeleteProps) =>
  useMutate<void, unknown, EntityPropertyDeleteQueryParams, void, void>(
    'DELETE',
    `/api/services/app/EntityProperty/Delete`,
    { ...props }
  );

export type entityPropertyDeleteProps = Omit<
  RestfulShesha.MutateProps<void, unknown, EntityPropertyDeleteQueryParams, void, void>,
  'data'
>;
export const entityPropertyDelete = (props: entityPropertyDeleteProps) =>
  RestfulShesha.mutate<void, unknown, EntityPropertyDeleteQueryParams, void, void>(
    'DELETE',
    `/api/services/app/EntityProperty/Delete`,
    undefined,
    props
  );
