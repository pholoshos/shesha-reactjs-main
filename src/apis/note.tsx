/* Generated by restful-react */

import React from "react";
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from "restful-react";

import * as RestfulShesha from "../utils/fetchers"
export const SPEC_VERSION = "v1"; 
export interface AjaxResponseBase {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
}

export interface CreateNoteDto {
  id?: string;
  /**
   * Id of the owner entity
   */
  ownerId: string;
  /**
   * Type short alias of the owner entity
   */
  ownerType: string;
  /**
   * Category of the note. Is used to split notes into groups
   */
  category?: number | null;
  /**
   * Note importance (priority)
   */
  priority?: number | null;
  /**
   * Id of the parent note
   */
  parentId?: string | null;
  /**
   * Text
   */
  noteText: string;
}

export interface ErrorInfo {
  code?: number;
  message?: string | null;
  details?: string | null;
  validationErrors?: ValidationErrorInfo[] | null;
}

/**
 * Generic entity reference Dto
 */
export interface GuidEntityReferenceDto {
  id?: string;
  /**
   * Entity display name
   */
  _displayName?: string | null;
  /**
   * Entity class name
   */
  _className?: string | null;
}

export type JToken = JToken[];

export interface MetaDto {
  className?: string | null;
}

export interface NoteDto {
  id?: string;
  /**
   * Id of the owner entity
   */
  ownerId: string;
  /**
   * Type short alias of the owner entity
   */
  ownerType: string;
  /**
   * Creation time
   */
  creationTime?: string | null;
  /**
   * Category of the note. Is used to split notes into groups
   */
  category?: number | null;
  /**
   * Note importance (priority)
   */
  priority?: number | null;
  /**
   * Id of the parent note
   */
  parentId?: string | null;
  /**
   * Text
   */
  noteText: string;
  author?: GuidEntityReferenceDto;
}

export interface NoteDtoAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: NoteDto;
}

export interface NoteDtoListAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: NoteDto[] | null;
}

export interface NoteDtoPagedResultDto {
  items?: NoteDto[] | null;
  totalCount?: number;
}

export interface NoteDtoPagedResultDtoAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: NoteDtoPagedResultDto;
}

export interface NoteGraphQLDataResult {
  isDeleted?: boolean | null;
  ownerType?: string;
  deleterUserId?: number | null;
  creationTime?: string | null;
  priority?: number | null;
  deletionTime?: string | null;
  category?: number | null;
  parent?: string | null;
  tenantId?: number | null;
  lastModifierUserId?: number | null;
  author?: string | null;
  lastModificationTime?: string | null;
  creatorUserId?: number | null;
  ownerId?: string;
  noteText?: string;
  _className?: MetaDto;
  _jObject?: {
  [key: string]: JToken;
};
  id?: string;
}

export interface NoteGraphQLDataResultAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: NoteGraphQLDataResult;
}

/**
 * NOTE: shape of the response depends on the `properties` argument
 */
export interface NotePagedResultDtoGraphQLDataResult {
  totalCount?: number;
  items?: ProxyDynamicDtoNoteGuid[];
}

export interface NotePagedResultDtoGraphQLDataResultAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: NotePagedResultDtoGraphQLDataResult;
}

export interface ProxyDynamicDtoNoteGuid {
  id?: string;
  _jObject?: {
  [key: string]: JToken;
} | null;
  isDeleted?: boolean | null;
  ownerType?: string | null;
  deleterUserId?: number | null;
  creationTime?: string | null;
  priority?: number | null;
  deletionTime?: string | null;
  category?: number | null;
  parent?: string | null;
  tenantId?: number | null;
  lastModifierUserId?: number | null;
  author?: string | null;
  lastModificationTime?: string | null;
  creatorUserId?: number | null;
  ownerId?: string | null;
  noteText?: string | null;
  _className?: MetaDto;
}

export interface UpdateNoteDto {
  id?: string;
  /**
   * Category of the note. Is used to split notes into groups
   */
  category?: number | null;
  /**
   * Note importance (priority)
   */
  priority?: number | null;
  /**
   * Id of the parent note
   */
  parentId?: string | null;
  /**
   * Text
   */
  noteText: string;
}

export interface ValidationErrorInfo {
  message?: string | null;
  members?: string[] | null;
}

export interface NoteGetListQueryParams {
  /**
   * Id of the owner entity
   */
  ownerId: string;
  /**
   * Type short alias of the owner entity
   */
  ownerType: string;
  /**
   * Category of the note. Is used to split notes into groups
   */
  category?: number;
  /**
   * Set to true to get notes of all categories
   */
  allCategories?: boolean;
  /**
   * The requested API version
   */
  "api-version"?: string;
}

export type NoteGetListProps = Omit<GetProps<NoteDtoListAjaxResponse, AjaxResponseBase, NoteGetListQueryParams, void>, "path">;

export const NoteGetList = (props: NoteGetListProps) => (
  <Get<NoteDtoListAjaxResponse, AjaxResponseBase, NoteGetListQueryParams, void>
    path={`/api/services/app/Note/GetList`}
    
    {...props}
  />
);

export type UseNoteGetListProps = Omit<UseGetProps<NoteDtoListAjaxResponse, AjaxResponseBase, NoteGetListQueryParams, void>, "path">;

export const useNoteGetList = (props: UseNoteGetListProps) => useGet<NoteDtoListAjaxResponse, AjaxResponseBase, NoteGetListQueryParams, void>(`/api/services/app/Note/GetList`, props);

export type noteGetListProps = Omit<
    RestfulShesha.GetProps<NoteDtoListAjaxResponse, AjaxResponseBase, NoteGetListQueryParams, void>,
    'queryParams'
  >;
        export const noteGetList = (queryParams: NoteGetListQueryParams,
          props: noteGetListProps) => RestfulShesha.get<NoteDtoListAjaxResponse, AjaxResponseBase, NoteGetListQueryParams, void>(`/api/services/app/Note/GetList`, queryParams, props);


export interface NoteCreateQueryParams {
  /**
   * The requested API version
   */
  "api-version"?: string;
}

export type NoteCreateProps = Omit<MutateProps<NoteDtoAjaxResponse, AjaxResponseBase, NoteCreateQueryParams, CreateNoteDto, void>, "path" | "verb">;

export const NoteCreate = (props: NoteCreateProps) => (
  <Mutate<NoteDtoAjaxResponse, AjaxResponseBase, NoteCreateQueryParams, CreateNoteDto, void>
    verb="POST"
    path={`/api/services/app/Note/Create`}
    
    {...props}
  />
);

export type UseNoteCreateProps = Omit<UseMutateProps<NoteDtoAjaxResponse, AjaxResponseBase, NoteCreateQueryParams, CreateNoteDto, void>, "path" | "verb">;

export const useNoteCreate = (props: UseNoteCreateProps) => useMutate<NoteDtoAjaxResponse, AjaxResponseBase, NoteCreateQueryParams, CreateNoteDto, void>("POST", `/api/services/app/Note/Create`, props);

export type noteCreateProps = Omit<
    RestfulShesha.MutateProps<NoteDtoAjaxResponse, AjaxResponseBase, NoteCreateQueryParams, CreateNoteDto, void>,
    'data'
  >;
      export const noteCreate = (data: CreateNoteDto,props: noteCreateProps) => RestfulShesha.mutate<NoteDtoAjaxResponse, AjaxResponseBase, NoteCreateQueryParams, CreateNoteDto, void>("POST", `/api/services/app/Note/Create`, data, props);


export interface NoteGetAllQueryParams {
  /**
   * Filter string in JsonLogic format
   */
  filter?: string;
  /**
   * Quick search string. Is used to search entities by text
   */
  quickSearch?: string;
  sorting?: string;
  skipCount?: number;
  maxResultCount?: number;
  /**
   * The requested API version
   */
  "api-version"?: string;
}

export type NoteGetAllProps = Omit<GetProps<NoteDtoPagedResultDtoAjaxResponse, AjaxResponseBase, NoteGetAllQueryParams, void>, "path">;

export const NoteGetAll = (props: NoteGetAllProps) => (
  <Get<NoteDtoPagedResultDtoAjaxResponse, AjaxResponseBase, NoteGetAllQueryParams, void>
    path={`/api/services/app/Note/GetAll`}
    
    {...props}
  />
);

export type UseNoteGetAllProps = Omit<UseGetProps<NoteDtoPagedResultDtoAjaxResponse, AjaxResponseBase, NoteGetAllQueryParams, void>, "path">;

export const useNoteGetAll = (props: UseNoteGetAllProps) => useGet<NoteDtoPagedResultDtoAjaxResponse, AjaxResponseBase, NoteGetAllQueryParams, void>(`/api/services/app/Note/GetAll`, props);

export type noteGetAllProps = Omit<
    RestfulShesha.GetProps<NoteDtoPagedResultDtoAjaxResponse, AjaxResponseBase, NoteGetAllQueryParams, void>,
    'queryParams'
  >;
        export const noteGetAll = (queryParams: NoteGetAllQueryParams,
          props: noteGetAllProps) => RestfulShesha.get<NoteDtoPagedResultDtoAjaxResponse, AjaxResponseBase, NoteGetAllQueryParams, void>(`/api/services/app/Note/GetAll`, queryParams, props);


export interface NoteQueryQueryParams {
  /**
   * List of properties to fetch in GraphQL-like syntax. Supports nested properties
   */
  properties?: string;
  id?: string;
  /**
   * The requested API version
   */
  "api-version"?: string;
}

export type NoteQueryProps = Omit<GetProps<NoteGraphQLDataResultAjaxResponse, AjaxResponseBase, NoteQueryQueryParams, void>, "path">;

/**
 * Query entity data. 
 * NOTE: don't use on prod, will be merged with the `Get`endpoint soon
 */
export const NoteQuery = (props: NoteQueryProps) => (
  <Get<NoteGraphQLDataResultAjaxResponse, AjaxResponseBase, NoteQueryQueryParams, void>
    path={`/api/services/app/Note/Query`}
    
    {...props}
  />
);

export type UseNoteQueryProps = Omit<UseGetProps<NoteGraphQLDataResultAjaxResponse, AjaxResponseBase, NoteQueryQueryParams, void>, "path">;

/**
 * Query entity data. 
 * NOTE: don't use on prod, will be merged with the `Get`endpoint soon
 */
export const useNoteQuery = (props: UseNoteQueryProps) => useGet<NoteGraphQLDataResultAjaxResponse, AjaxResponseBase, NoteQueryQueryParams, void>(`/api/services/app/Note/Query`, props);

export type noteQueryProps = Omit<
    RestfulShesha.GetProps<NoteGraphQLDataResultAjaxResponse, AjaxResponseBase, NoteQueryQueryParams, void>,
    'queryParams'
  >;
        /**
 * Query entity data. 
 * NOTE: don't use on prod, will be merged with the `Get`endpoint soon
 */
export const noteQuery = (queryParams: NoteQueryQueryParams,
          props: noteQueryProps) => RestfulShesha.get<NoteGraphQLDataResultAjaxResponse, AjaxResponseBase, NoteQueryQueryParams, void>(`/api/services/app/Note/Query`, queryParams, props);


export interface NoteQueryAllQueryParams {
  /**
   * List of properties to fetch in GraphQL-like syntax. Supports nested properties
   */
  properties?: string;
  /**
   * Filter string in JsonLogic format
   */
  filter?: string;
  /**
   * Quick search string. Is used to search entities by text
   */
  quickSearch?: string;
  sorting?: string;
  skipCount?: number;
  maxResultCount?: number;
  /**
   * The requested API version
   */
  "api-version"?: string;
}

export type NoteQueryAllProps = Omit<GetProps<NotePagedResultDtoGraphQLDataResultAjaxResponse, AjaxResponseBase, NoteQueryAllQueryParams, void>, "path">;

/**
 * Query entities list
 * NOTE: don't use on prod, will be merged with the GetAll endpoint soon
 */
export const NoteQueryAll = (props: NoteQueryAllProps) => (
  <Get<NotePagedResultDtoGraphQLDataResultAjaxResponse, AjaxResponseBase, NoteQueryAllQueryParams, void>
    path={`/api/services/app/Note/QueryAll`}
    
    {...props}
  />
);

export type UseNoteQueryAllProps = Omit<UseGetProps<NotePagedResultDtoGraphQLDataResultAjaxResponse, AjaxResponseBase, NoteQueryAllQueryParams, void>, "path">;

/**
 * Query entities list
 * NOTE: don't use on prod, will be merged with the GetAll endpoint soon
 */
export const useNoteQueryAll = (props: UseNoteQueryAllProps) => useGet<NotePagedResultDtoGraphQLDataResultAjaxResponse, AjaxResponseBase, NoteQueryAllQueryParams, void>(`/api/services/app/Note/QueryAll`, props);

export type noteQueryAllProps = Omit<
    RestfulShesha.GetProps<NotePagedResultDtoGraphQLDataResultAjaxResponse, AjaxResponseBase, NoteQueryAllQueryParams, void>,
    'queryParams'
  >;
        /**
 * Query entities list
 * NOTE: don't use on prod, will be merged with the GetAll endpoint soon
 */
export const noteQueryAll = (queryParams: NoteQueryAllQueryParams,
          props: noteQueryAllProps) => RestfulShesha.get<NotePagedResultDtoGraphQLDataResultAjaxResponse, AjaxResponseBase, NoteQueryAllQueryParams, void>(`/api/services/app/Note/QueryAll`, queryParams, props);


export interface NoteGetQueryParams {
  id?: string;
  /**
   * The requested API version
   */
  "api-version"?: string;
}

export type NoteGetProps = Omit<GetProps<NoteDtoAjaxResponse, AjaxResponseBase, NoteGetQueryParams, void>, "path">;

export const NoteGet = (props: NoteGetProps) => (
  <Get<NoteDtoAjaxResponse, AjaxResponseBase, NoteGetQueryParams, void>
    path={`/api/services/app/Note/Get`}
    
    {...props}
  />
);

export type UseNoteGetProps = Omit<UseGetProps<NoteDtoAjaxResponse, AjaxResponseBase, NoteGetQueryParams, void>, "path">;

export const useNoteGet = (props: UseNoteGetProps) => useGet<NoteDtoAjaxResponse, AjaxResponseBase, NoteGetQueryParams, void>(`/api/services/app/Note/Get`, props);

export type noteGetProps = Omit<
    RestfulShesha.GetProps<NoteDtoAjaxResponse, AjaxResponseBase, NoteGetQueryParams, void>,
    'queryParams'
  >;
        export const noteGet = (queryParams: NoteGetQueryParams,
          props: noteGetProps) => RestfulShesha.get<NoteDtoAjaxResponse, AjaxResponseBase, NoteGetQueryParams, void>(`/api/services/app/Note/Get`, queryParams, props);


export interface NoteUpdateQueryParams {
  /**
   * The requested API version
   */
  "api-version"?: string;
}

export type NoteUpdateProps = Omit<MutateProps<NoteDtoAjaxResponse, AjaxResponseBase, NoteUpdateQueryParams, UpdateNoteDto, void>, "path" | "verb">;

export const NoteUpdate = (props: NoteUpdateProps) => (
  <Mutate<NoteDtoAjaxResponse, AjaxResponseBase, NoteUpdateQueryParams, UpdateNoteDto, void>
    verb="PUT"
    path={`/api/services/app/Note/Update`}
    
    {...props}
  />
);

export type UseNoteUpdateProps = Omit<UseMutateProps<NoteDtoAjaxResponse, AjaxResponseBase, NoteUpdateQueryParams, UpdateNoteDto, void>, "path" | "verb">;

export const useNoteUpdate = (props: UseNoteUpdateProps) => useMutate<NoteDtoAjaxResponse, AjaxResponseBase, NoteUpdateQueryParams, UpdateNoteDto, void>("PUT", `/api/services/app/Note/Update`, props);

export type noteUpdateProps = Omit<
    RestfulShesha.MutateProps<NoteDtoAjaxResponse, AjaxResponseBase, NoteUpdateQueryParams, UpdateNoteDto, void>,
    'data'
  >;
      export const noteUpdate = (data: UpdateNoteDto,props: noteUpdateProps) => RestfulShesha.mutate<NoteDtoAjaxResponse, AjaxResponseBase, NoteUpdateQueryParams, UpdateNoteDto, void>("PUT", `/api/services/app/Note/Update`, data, props);


export interface NoteDeleteQueryParams {
  id?: string;
  /**
   * The requested API version
   */
  "api-version"?: string;
}

export type NoteDeleteProps = Omit<MutateProps<void, unknown, NoteDeleteQueryParams, void, void>, "path" | "verb">;

export const NoteDelete = (props: NoteDeleteProps) => (
  <Mutate<void, unknown, NoteDeleteQueryParams, void, void>
    verb="DELETE"
    path={`/api/services/app/Note/Delete`}
    
    {...props}
  />
);

export type UseNoteDeleteProps = Omit<UseMutateProps<void, unknown, NoteDeleteQueryParams, void, void>, "path" | "verb">;

export const useNoteDelete = (props: UseNoteDeleteProps) => useMutate<void, unknown, NoteDeleteQueryParams, void, void>("DELETE", `/api/services/app/Note/Delete`, {   ...props });

export type noteDeleteProps = Omit<
    RestfulShesha.MutateProps<void, unknown, NoteDeleteQueryParams, void, void>,
    'data'
  >;
      export const noteDelete = (props: noteDeleteProps) => RestfulShesha.mutate<void, unknown, NoteDeleteQueryParams, void, void>("DELETE", `/api/services/app/Note/Delete`, undefined, props);

