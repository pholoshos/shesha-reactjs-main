/* Generated by restful-react */

import React from 'react';
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from 'restful-react';

import * as RestfulShesha from '../utils/fetchers';
export const SPEC_VERSION = 'v1';
export interface AjaxResponseBase {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
}

/**
 * Configurable Component DTO
 */
export interface ConfigurableComponentDto {
  id?: string;
  /**
   * Form name
   */
  name?: string | null;
  /**
   * Description
   */
  description?: string | null;
  /**
   * Settings in JSON format
   */
  settings?: string | null;
  /**
   * Cache MD5, is used for client-side caching
   */
  cacheMd5?: string | null;
}

export interface ConfigurableComponentDtoAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: ConfigurableComponentDto;
}

export interface ConfigurableComponentDtoPagedResultDto {
  items?: ConfigurableComponentDto[] | null;
  totalCount?: number;
}

export interface ConfigurableComponentDtoPagedResultDtoAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: ConfigurableComponentDtoPagedResultDto;
}

export interface ConfigurableComponentGraphQLDataResult {
  contentType?: string | null;
  serializerSettings?: {} | null;
  statusCode?: number | null;
  value?: {} | null;
}

export interface ConfigurableComponentGraphQLDataResultAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: ConfigurableComponentGraphQLDataResult;
}

export interface ConfigurableComponentPagedResultDtoGraphQLDataResult {
  contentType?: string | null;
  serializerSettings?: {} | null;
  statusCode?: number | null;
  value?: {} | null;
}

export interface ConfigurableComponentPagedResultDtoGraphQLDataResultAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: ConfigurableComponentPagedResultDtoGraphQLDataResult;
}

/**
 * Update component settings input
 */
export interface ConfigurableComponentUpdateSettingsInput {
  /**
   * Module name
   */
  module?: string | null;
  /**
   * Component name
   */
  name?: string | null;
  /**
   * If true, indicates that component is application specific
   */
  isApplicationSpecific?: boolean;
  /**
   * Settings in JSON format
   */
  settings?: string | null;
}

/**
 * Create configurable component DTO
 */
export interface CreateConfigurableComponentDto {
  id?: string;
  /**
   * Module id
   */
  moduleId?: string | null;
  /**
   * Form name
   */
  name?: string | null;
  /**
   * Label
   */
  label?: string | null;
  /**
   * Description
   */
  description?: string | null;
  /**
   * Markup in JSON format
   */
  markup?: string | null;
  /**
   * Type of the form model
   */
  modelType?: string | null;
  /**
   * Type of form (index, detail etc)
   */
  type?: string | null;
  /**
   * Template that is used for the form creation
   */
  templateId?: string | null;
  /**
   * If true, indeicates that the form is a template
   */
  isTemplate?: boolean;
}

export interface ErrorInfo {
  code?: number;
  message?: string | null;
  details?: string | null;
  validationErrors?: ValidationErrorInfo[] | null;
}

/**
 * Update Configurable Component DTO
 */
export interface UpdateConfigurableComponentDto {
  id?: string;
  /**
   * Label
   */
  label?: string | null;
  /**
   * Description
   */
  description?: string | null;
  /**
   * Markup in JSON format
   */
  markup?: string | null;
  /**
   * Type of the form model
   */
  modelType?: string | null;
}

export interface ValidationErrorInfo {
  message?: string | null;
  members?: string[] | null;
}

export interface ConfigurableComponentGetByNameQueryParams {
  /**
   * Module name
   */
  module?: string;
  /**
   * Component name
   */
  name?: string;
  /**
   * If true, indicates that component is application specific
   */
  isApplicationSpecific?: boolean;
  /**
   * MD5 of the item. Is used for the client side caching.
   * If specified, the application should compare the value received from the client with a local cache and return http response with code 304 (not changed)
   */
  md5?: string;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type ConfigurableComponentGetByNameProps = Omit<
  GetProps<ConfigurableComponentDtoAjaxResponse, AjaxResponseBase, ConfigurableComponentGetByNameQueryParams, void>,
  'path'
>;

/**
 * Get current component configuration by name
 */
export const ConfigurableComponentGetByName = (props: ConfigurableComponentGetByNameProps) => (
  <Get<ConfigurableComponentDtoAjaxResponse, AjaxResponseBase, ConfigurableComponentGetByNameQueryParams, void>
    path={`/api/services/Shesha/ConfigurableComponent/GetByName`}
    {...props}
  />
);

export type UseConfigurableComponentGetByNameProps = Omit<
  UseGetProps<ConfigurableComponentDtoAjaxResponse, AjaxResponseBase, ConfigurableComponentGetByNameQueryParams, void>,
  'path'
>;

/**
 * Get current component configuration by name
 */
export const useConfigurableComponentGetByName = (props: UseConfigurableComponentGetByNameProps) =>
  useGet<ConfigurableComponentDtoAjaxResponse, AjaxResponseBase, ConfigurableComponentGetByNameQueryParams, void>(
    `/api/services/Shesha/ConfigurableComponent/GetByName`,
    props
  );

export type configurableComponentGetByNameProps = Omit<
  RestfulShesha.GetProps<
    ConfigurableComponentDtoAjaxResponse,
    AjaxResponseBase,
    ConfigurableComponentGetByNameQueryParams,
    void
  >,
  'queryParams'
>;
/**
 * Get current component configuration by name
 */
export const configurableComponentGetByName = (
  queryParams: ConfigurableComponentGetByNameQueryParams,
  props: configurableComponentGetByNameProps
) =>
  RestfulShesha.get<
    ConfigurableComponentDtoAjaxResponse,
    AjaxResponseBase,
    ConfigurableComponentGetByNameQueryParams,
    void
  >(`/api/services/Shesha/ConfigurableComponent/GetByName`, queryParams, props);

export interface ConfigurableComponentUpdateSettingsQueryParams {
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type ConfigurableComponentUpdateSettingsProps = Omit<
  MutateProps<
    void,
    unknown,
    ConfigurableComponentUpdateSettingsQueryParams,
    ConfigurableComponentUpdateSettingsInput,
    void
  >,
  'path' | 'verb'
>;

export const ConfigurableComponentUpdateSettings = (props: ConfigurableComponentUpdateSettingsProps) => (
  <Mutate<void, unknown, ConfigurableComponentUpdateSettingsQueryParams, ConfigurableComponentUpdateSettingsInput, void>
    verb="PUT"
    path={`/api/services/Shesha/ConfigurableComponent/UpdateSettings`}
    {...props}
  />
);

export type UseConfigurableComponentUpdateSettingsProps = Omit<
  UseMutateProps<
    void,
    unknown,
    ConfigurableComponentUpdateSettingsQueryParams,
    ConfigurableComponentUpdateSettingsInput,
    void
  >,
  'path' | 'verb'
>;

export const useConfigurableComponentUpdateSettings = (props: UseConfigurableComponentUpdateSettingsProps) =>
  useMutate<
    void,
    unknown,
    ConfigurableComponentUpdateSettingsQueryParams,
    ConfigurableComponentUpdateSettingsInput,
    void
  >('PUT', `/api/services/Shesha/ConfigurableComponent/UpdateSettings`, props);

export type configurableComponentUpdateSettingsProps = Omit<
  RestfulShesha.MutateProps<
    void,
    unknown,
    ConfigurableComponentUpdateSettingsQueryParams,
    ConfigurableComponentUpdateSettingsInput,
    void
  >,
  'data'
>;
export const configurableComponentUpdateSettings = (
  data: ConfigurableComponentUpdateSettingsInput,
  props: configurableComponentUpdateSettingsProps
) =>
  RestfulShesha.mutate<
    void,
    unknown,
    ConfigurableComponentUpdateSettingsQueryParams,
    ConfigurableComponentUpdateSettingsInput,
    void
  >('PUT', `/api/services/Shesha/ConfigurableComponent/UpdateSettings`, data, props);

export interface ConfigurableComponentGetAllQueryParams {
  /**
   * Filter string in JsonLogic format
   */
  filter?: string;
  /**
   * Quick search string. Is used to search entities by text
   */
  quickSearch?: string;
  sorting?: string;
  skipCount?: number;
  maxResultCount?: number;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type ConfigurableComponentGetAllProps = Omit<
  GetProps<
    ConfigurableComponentDtoPagedResultDtoAjaxResponse,
    AjaxResponseBase,
    ConfigurableComponentGetAllQueryParams,
    void
  >,
  'path'
>;

export const ConfigurableComponentGetAll = (props: ConfigurableComponentGetAllProps) => (
  <Get<
    ConfigurableComponentDtoPagedResultDtoAjaxResponse,
    AjaxResponseBase,
    ConfigurableComponentGetAllQueryParams,
    void
  >
    path={`/api/services/Shesha/ConfigurableComponent/GetAll`}
    {...props}
  />
);

export type UseConfigurableComponentGetAllProps = Omit<
  UseGetProps<
    ConfigurableComponentDtoPagedResultDtoAjaxResponse,
    AjaxResponseBase,
    ConfigurableComponentGetAllQueryParams,
    void
  >,
  'path'
>;

export const useConfigurableComponentGetAll = (props: UseConfigurableComponentGetAllProps) =>
  useGet<
    ConfigurableComponentDtoPagedResultDtoAjaxResponse,
    AjaxResponseBase,
    ConfigurableComponentGetAllQueryParams,
    void
  >(`/api/services/Shesha/ConfigurableComponent/GetAll`, props);

export type configurableComponentGetAllProps = Omit<
  RestfulShesha.GetProps<
    ConfigurableComponentDtoPagedResultDtoAjaxResponse,
    AjaxResponseBase,
    ConfigurableComponentGetAllQueryParams,
    void
  >,
  'queryParams'
>;
export const configurableComponentGetAll = (
  queryParams: ConfigurableComponentGetAllQueryParams,
  props: configurableComponentGetAllProps
) =>
  RestfulShesha.get<
    ConfigurableComponentDtoPagedResultDtoAjaxResponse,
    AjaxResponseBase,
    ConfigurableComponentGetAllQueryParams,
    void
  >(`/api/services/Shesha/ConfigurableComponent/GetAll`, queryParams, props);

export interface ConfigurableComponentQueryQueryParams {
  /**
   * List of properties to fetch in GraphQL-like syntax. Supports nested properties
   */
  properties?: string;
  id?: string;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type ConfigurableComponentQueryProps = Omit<
  GetProps<
    ConfigurableComponentGraphQLDataResultAjaxResponse,
    AjaxResponseBase,
    ConfigurableComponentQueryQueryParams,
    void
  >,
  'path'
>;

/**
 * Query entity data.
 * NOTE: don't use on prod, will be merged with the `Get`endpoint soon
 */
export const ConfigurableComponentQuery = (props: ConfigurableComponentQueryProps) => (
  <Get<
    ConfigurableComponentGraphQLDataResultAjaxResponse,
    AjaxResponseBase,
    ConfigurableComponentQueryQueryParams,
    void
  >
    path={`/api/services/Shesha/ConfigurableComponent/Query`}
    {...props}
  />
);

export type UseConfigurableComponentQueryProps = Omit<
  UseGetProps<
    ConfigurableComponentGraphQLDataResultAjaxResponse,
    AjaxResponseBase,
    ConfigurableComponentQueryQueryParams,
    void
  >,
  'path'
>;

/**
 * Query entity data.
 * NOTE: don't use on prod, will be merged with the `Get`endpoint soon
 */
export const useConfigurableComponentQuery = (props: UseConfigurableComponentQueryProps) =>
  useGet<
    ConfigurableComponentGraphQLDataResultAjaxResponse,
    AjaxResponseBase,
    ConfigurableComponentQueryQueryParams,
    void
  >(`/api/services/Shesha/ConfigurableComponent/Query`, props);

export type configurableComponentQueryProps = Omit<
  RestfulShesha.GetProps<
    ConfigurableComponentGraphQLDataResultAjaxResponse,
    AjaxResponseBase,
    ConfigurableComponentQueryQueryParams,
    void
  >,
  'queryParams'
>;
/**
 * Query entity data.
 * NOTE: don't use on prod, will be merged with the `Get`endpoint soon
 */
export const configurableComponentQuery = (
  queryParams: ConfigurableComponentQueryQueryParams,
  props: configurableComponentQueryProps
) =>
  RestfulShesha.get<
    ConfigurableComponentGraphQLDataResultAjaxResponse,
    AjaxResponseBase,
    ConfigurableComponentQueryQueryParams,
    void
  >(`/api/services/Shesha/ConfigurableComponent/Query`, queryParams, props);

export interface ConfigurableComponentQueryAllQueryParams {
  /**
   * List of properties to fetch in GraphQL-like syntax. Supports nested properties
   */
  properties?: string;
  /**
   * Filter string in JsonLogic format
   */
  filter?: string;
  /**
   * Quick search string. Is used to search entities by text
   */
  quickSearch?: string;
  sorting?: string;
  skipCount?: number;
  maxResultCount?: number;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type ConfigurableComponentQueryAllProps = Omit<
  GetProps<
    ConfigurableComponentPagedResultDtoGraphQLDataResultAjaxResponse,
    AjaxResponseBase,
    ConfigurableComponentQueryAllQueryParams,
    void
  >,
  'path'
>;

/**
 * Query entities list
 * NOTE: don't use on prod, will be merged with the GetAll endpoint soon
 */
export const ConfigurableComponentQueryAll = (props: ConfigurableComponentQueryAllProps) => (
  <Get<
    ConfigurableComponentPagedResultDtoGraphQLDataResultAjaxResponse,
    AjaxResponseBase,
    ConfigurableComponentQueryAllQueryParams,
    void
  >
    path={`/api/services/Shesha/ConfigurableComponent/QueryAll`}
    {...props}
  />
);

export type UseConfigurableComponentQueryAllProps = Omit<
  UseGetProps<
    ConfigurableComponentPagedResultDtoGraphQLDataResultAjaxResponse,
    AjaxResponseBase,
    ConfigurableComponentQueryAllQueryParams,
    void
  >,
  'path'
>;

/**
 * Query entities list
 * NOTE: don't use on prod, will be merged with the GetAll endpoint soon
 */
export const useConfigurableComponentQueryAll = (props: UseConfigurableComponentQueryAllProps) =>
  useGet<
    ConfigurableComponentPagedResultDtoGraphQLDataResultAjaxResponse,
    AjaxResponseBase,
    ConfigurableComponentQueryAllQueryParams,
    void
  >(`/api/services/Shesha/ConfigurableComponent/QueryAll`, props);

export type configurableComponentQueryAllProps = Omit<
  RestfulShesha.GetProps<
    ConfigurableComponentPagedResultDtoGraphQLDataResultAjaxResponse,
    AjaxResponseBase,
    ConfigurableComponentQueryAllQueryParams,
    void
  >,
  'queryParams'
>;
/**
 * Query entities list
 * NOTE: don't use on prod, will be merged with the GetAll endpoint soon
 */
export const configurableComponentQueryAll = (
  queryParams: ConfigurableComponentQueryAllQueryParams,
  props: configurableComponentQueryAllProps
) =>
  RestfulShesha.get<
    ConfigurableComponentPagedResultDtoGraphQLDataResultAjaxResponse,
    AjaxResponseBase,
    ConfigurableComponentQueryAllQueryParams,
    void
  >(`/api/services/Shesha/ConfigurableComponent/QueryAll`, queryParams, props);

export interface ConfigurableComponentGetQueryParams {
  /**
   * Form configuration id
   */
  id?: string;
  /**
   * MD5 of the item. Is used for the client side caching.
   * If specified, the application should compare the value received from the client with a local cache and return http response with code 304 (not changed)
   */
  md5?: string;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type ConfigurableComponentGetProps = Omit<
  GetProps<ConfigurableComponentDtoAjaxResponse, AjaxResponseBase, ConfigurableComponentGetQueryParams, void>,
  'path'
>;

export const ConfigurableComponentGet = (props: ConfigurableComponentGetProps) => (
  <Get<ConfigurableComponentDtoAjaxResponse, AjaxResponseBase, ConfigurableComponentGetQueryParams, void>
    path={`/api/services/Shesha/ConfigurableComponent/Get`}
    {...props}
  />
);

export type UseConfigurableComponentGetProps = Omit<
  UseGetProps<ConfigurableComponentDtoAjaxResponse, AjaxResponseBase, ConfigurableComponentGetQueryParams, void>,
  'path'
>;

export const useConfigurableComponentGet = (props: UseConfigurableComponentGetProps) =>
  useGet<ConfigurableComponentDtoAjaxResponse, AjaxResponseBase, ConfigurableComponentGetQueryParams, void>(
    `/api/services/Shesha/ConfigurableComponent/Get`,
    props
  );

export type configurableComponentGetProps = Omit<
  RestfulShesha.GetProps<
    ConfigurableComponentDtoAjaxResponse,
    AjaxResponseBase,
    ConfigurableComponentGetQueryParams,
    void
  >,
  'queryParams'
>;
export const configurableComponentGet = (
  queryParams: ConfigurableComponentGetQueryParams,
  props: configurableComponentGetProps
) =>
  RestfulShesha.get<ConfigurableComponentDtoAjaxResponse, AjaxResponseBase, ConfigurableComponentGetQueryParams, void>(
    `/api/services/Shesha/ConfigurableComponent/Get`,
    queryParams,
    props
  );

export interface ConfigurableComponentCreateQueryParams {
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type ConfigurableComponentCreateProps = Omit<
  MutateProps<
    ConfigurableComponentDtoAjaxResponse,
    AjaxResponseBase,
    ConfigurableComponentCreateQueryParams,
    CreateConfigurableComponentDto,
    void
  >,
  'path' | 'verb'
>;

export const ConfigurableComponentCreate = (props: ConfigurableComponentCreateProps) => (
  <Mutate<
    ConfigurableComponentDtoAjaxResponse,
    AjaxResponseBase,
    ConfigurableComponentCreateQueryParams,
    CreateConfigurableComponentDto,
    void
  >
    verb="POST"
    path={`/api/services/Shesha/ConfigurableComponent/Create`}
    {...props}
  />
);

export type UseConfigurableComponentCreateProps = Omit<
  UseMutateProps<
    ConfigurableComponentDtoAjaxResponse,
    AjaxResponseBase,
    ConfigurableComponentCreateQueryParams,
    CreateConfigurableComponentDto,
    void
  >,
  'path' | 'verb'
>;

export const useConfigurableComponentCreate = (props: UseConfigurableComponentCreateProps) =>
  useMutate<
    ConfigurableComponentDtoAjaxResponse,
    AjaxResponseBase,
    ConfigurableComponentCreateQueryParams,
    CreateConfigurableComponentDto,
    void
  >('POST', `/api/services/Shesha/ConfigurableComponent/Create`, props);

export type configurableComponentCreateProps = Omit<
  RestfulShesha.MutateProps<
    ConfigurableComponentDtoAjaxResponse,
    AjaxResponseBase,
    ConfigurableComponentCreateQueryParams,
    CreateConfigurableComponentDto,
    void
  >,
  'data'
>;
export const configurableComponentCreate = (
  data: CreateConfigurableComponentDto,
  props: configurableComponentCreateProps
) =>
  RestfulShesha.mutate<
    ConfigurableComponentDtoAjaxResponse,
    AjaxResponseBase,
    ConfigurableComponentCreateQueryParams,
    CreateConfigurableComponentDto,
    void
  >('POST', `/api/services/Shesha/ConfigurableComponent/Create`, data, props);

export interface ConfigurableComponentUpdateQueryParams {
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type ConfigurableComponentUpdateProps = Omit<
  MutateProps<
    ConfigurableComponentDtoAjaxResponse,
    AjaxResponseBase,
    ConfigurableComponentUpdateQueryParams,
    UpdateConfigurableComponentDto,
    void
  >,
  'path' | 'verb'
>;

export const ConfigurableComponentUpdate = (props: ConfigurableComponentUpdateProps) => (
  <Mutate<
    ConfigurableComponentDtoAjaxResponse,
    AjaxResponseBase,
    ConfigurableComponentUpdateQueryParams,
    UpdateConfigurableComponentDto,
    void
  >
    verb="PUT"
    path={`/api/services/Shesha/ConfigurableComponent/Update`}
    {...props}
  />
);

export type UseConfigurableComponentUpdateProps = Omit<
  UseMutateProps<
    ConfigurableComponentDtoAjaxResponse,
    AjaxResponseBase,
    ConfigurableComponentUpdateQueryParams,
    UpdateConfigurableComponentDto,
    void
  >,
  'path' | 'verb'
>;

export const useConfigurableComponentUpdate = (props: UseConfigurableComponentUpdateProps) =>
  useMutate<
    ConfigurableComponentDtoAjaxResponse,
    AjaxResponseBase,
    ConfigurableComponentUpdateQueryParams,
    UpdateConfigurableComponentDto,
    void
  >('PUT', `/api/services/Shesha/ConfigurableComponent/Update`, props);

export type configurableComponentUpdateProps = Omit<
  RestfulShesha.MutateProps<
    ConfigurableComponentDtoAjaxResponse,
    AjaxResponseBase,
    ConfigurableComponentUpdateQueryParams,
    UpdateConfigurableComponentDto,
    void
  >,
  'data'
>;
export const configurableComponentUpdate = (
  data: UpdateConfigurableComponentDto,
  props: configurableComponentUpdateProps
) =>
  RestfulShesha.mutate<
    ConfigurableComponentDtoAjaxResponse,
    AjaxResponseBase,
    ConfigurableComponentUpdateQueryParams,
    UpdateConfigurableComponentDto,
    void
  >('PUT', `/api/services/Shesha/ConfigurableComponent/Update`, data, props);

export interface ConfigurableComponentDeleteQueryParams {
  id?: string;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type ConfigurableComponentDeleteProps = Omit<
  MutateProps<void, unknown, ConfigurableComponentDeleteQueryParams, void, void>,
  'path' | 'verb'
>;

export const ConfigurableComponentDelete = (props: ConfigurableComponentDeleteProps) => (
  <Mutate<void, unknown, ConfigurableComponentDeleteQueryParams, void, void>
    verb="DELETE"
    path={`/api/services/Shesha/ConfigurableComponent/Delete`}
    {...props}
  />
);

export type UseConfigurableComponentDeleteProps = Omit<
  UseMutateProps<void, unknown, ConfigurableComponentDeleteQueryParams, void, void>,
  'path' | 'verb'
>;

export const useConfigurableComponentDelete = (props: UseConfigurableComponentDeleteProps) =>
  useMutate<void, unknown, ConfigurableComponentDeleteQueryParams, void, void>(
    'DELETE',
    `/api/services/Shesha/ConfigurableComponent/Delete`,
    { ...props }
  );

export type configurableComponentDeleteProps = Omit<
  RestfulShesha.MutateProps<void, unknown, ConfigurableComponentDeleteQueryParams, void, void>,
  'data'
>;
export const configurableComponentDelete = (props: configurableComponentDeleteProps) =>
  RestfulShesha.mutate<void, unknown, ConfigurableComponentDeleteQueryParams, void, void>(
    'DELETE',
    `/api/services/Shesha/ConfigurableComponent/Delete`,
    undefined,
    props
  );
