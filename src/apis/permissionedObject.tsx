/* Generated by restful-react */

import React from 'react';
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from 'restful-react';

import * as RestfulShesha from '../utils/fetchers';
export const SPEC_VERSION = 'v1';
export interface AjaxResponseBase {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
}

export interface ErrorInfo {
  code?: number;
  message?: string | null;
  details?: string | null;
  validationErrors?: ValidationErrorInfo[] | null;
}

export interface PermissionedObjectDto {
  id?: string;
  object?: string | null;
  category?: string | null;
  module?: string | null;
  type?: string | null;
  name?: string | null;
  description?: string | null;
  permissions?: string[] | null;
  actualPermissions?: string[] | null;
  inherited?: boolean;
  access?: number | null;
  parent?: string | null;
  dependency?: string | null;
  child?: PermissionedObjectDto[] | null;
  hidden?: boolean;
}

export interface PermissionedObjectDtoAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: PermissionedObjectDto;
}

export interface PermissionedObjectDtoListAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: PermissionedObjectDto[] | null;
}

export interface PermissionedObjectDtoPagedResultDto {
  items?: PermissionedObjectDto[] | null;
  totalCount?: number;
}

export interface PermissionedObjectDtoPagedResultDtoAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: PermissionedObjectDtoPagedResultDto;
}

export interface ValidationErrorInfo {
  message?: string | null;
  members?: string[] | null;
}

export interface PermissionedObjectGetAllFlatQueryParams {
  type?: string;
  showNested?: boolean;
  showHidden?: boolean;
}

export type PermissionedObjectGetAllFlatProps = Omit<
  GetProps<PermissionedObjectDtoListAjaxResponse, AjaxResponseBase, PermissionedObjectGetAllFlatQueryParams, void>,
  'path'
>;

/**
 * Get list of protected objects
 */
export const PermissionedObjectGetAllFlat = (props: PermissionedObjectGetAllFlatProps) => (
  <Get<PermissionedObjectDtoListAjaxResponse, AjaxResponseBase, PermissionedObjectGetAllFlatQueryParams, void>
    path={`/api/services/app/PermissionedObject/GetAllFlat`}
    {...props}
  />
);

export type UsePermissionedObjectGetAllFlatProps = Omit<
  UseGetProps<PermissionedObjectDtoListAjaxResponse, AjaxResponseBase, PermissionedObjectGetAllFlatQueryParams, void>,
  'path'
>;

/**
 * Get list of protected objects
 */
export const usePermissionedObjectGetAllFlat = (props: UsePermissionedObjectGetAllFlatProps) =>
  useGet<PermissionedObjectDtoListAjaxResponse, AjaxResponseBase, PermissionedObjectGetAllFlatQueryParams, void>(
    `/api/services/app/PermissionedObject/GetAllFlat`,
    props
  );

export type permissionedObjectGetAllFlatProps = Omit<
  RestfulShesha.GetProps<
    PermissionedObjectDtoListAjaxResponse,
    AjaxResponseBase,
    PermissionedObjectGetAllFlatQueryParams,
    void
  >,
  'queryParams'
>;
/**
 * Get list of protected objects
 */
export const permissionedObjectGetAllFlat = (
  queryParams: PermissionedObjectGetAllFlatQueryParams,
  props: permissionedObjectGetAllFlatProps
) =>
  RestfulShesha.get<
    PermissionedObjectDtoListAjaxResponse,
    AjaxResponseBase,
    PermissionedObjectGetAllFlatQueryParams,
    void
  >(`/api/services/app/PermissionedObject/GetAllFlat`, queryParams, props);

export interface PermissionedObjectGetAllTreeQueryParams {
  type?: string;
  showHidden?: boolean;
}

export type PermissionedObjectGetAllTreeProps = Omit<
  GetProps<PermissionedObjectDtoListAjaxResponse, AjaxResponseBase, PermissionedObjectGetAllTreeQueryParams, void>,
  'path'
>;

/**
 * Get hierarchical list of protected objects
 */
export const PermissionedObjectGetAllTree = (props: PermissionedObjectGetAllTreeProps) => (
  <Get<PermissionedObjectDtoListAjaxResponse, AjaxResponseBase, PermissionedObjectGetAllTreeQueryParams, void>
    path={`/api/services/app/PermissionedObject/GetAllTree`}
    {...props}
  />
);

export type UsePermissionedObjectGetAllTreeProps = Omit<
  UseGetProps<PermissionedObjectDtoListAjaxResponse, AjaxResponseBase, PermissionedObjectGetAllTreeQueryParams, void>,
  'path'
>;

/**
 * Get hierarchical list of protected objects
 */
export const usePermissionedObjectGetAllTree = (props: UsePermissionedObjectGetAllTreeProps) =>
  useGet<PermissionedObjectDtoListAjaxResponse, AjaxResponseBase, PermissionedObjectGetAllTreeQueryParams, void>(
    `/api/services/app/PermissionedObject/GetAllTree`,
    props
  );

export type permissionedObjectGetAllTreeProps = Omit<
  RestfulShesha.GetProps<
    PermissionedObjectDtoListAjaxResponse,
    AjaxResponseBase,
    PermissionedObjectGetAllTreeQueryParams,
    void
  >,
  'queryParams'
>;
/**
 * Get hierarchical list of protected objects
 */
export const permissionedObjectGetAllTree = (
  queryParams: PermissionedObjectGetAllTreeQueryParams,
  props: permissionedObjectGetAllTreeProps
) =>
  RestfulShesha.get<
    PermissionedObjectDtoListAjaxResponse,
    AjaxResponseBase,
    PermissionedObjectGetAllTreeQueryParams,
    void
  >(`/api/services/app/PermissionedObject/GetAllTree`, queryParams, props);

export interface PermissionedObjectGetByObjectNameQueryParams {
  objectName?: string;
}

export type PermissionedObjectGetByObjectNameProps = Omit<
  GetProps<PermissionedObjectDtoAjaxResponse, AjaxResponseBase, PermissionedObjectGetByObjectNameQueryParams, void>,
  'path'
>;

/**
 * Get protected object by name
 */
export const PermissionedObjectGetByObjectName = (props: PermissionedObjectGetByObjectNameProps) => (
  <Get<PermissionedObjectDtoAjaxResponse, AjaxResponseBase, PermissionedObjectGetByObjectNameQueryParams, void>
    path={`/api/services/app/PermissionedObject/GetByObjectName`}
    {...props}
  />
);

export type UsePermissionedObjectGetByObjectNameProps = Omit<
  UseGetProps<PermissionedObjectDtoAjaxResponse, AjaxResponseBase, PermissionedObjectGetByObjectNameQueryParams, void>,
  'path'
>;

/**
 * Get protected object by name
 */
export const usePermissionedObjectGetByObjectName = (props: UsePermissionedObjectGetByObjectNameProps) =>
  useGet<PermissionedObjectDtoAjaxResponse, AjaxResponseBase, PermissionedObjectGetByObjectNameQueryParams, void>(
    `/api/services/app/PermissionedObject/GetByObjectName`,
    props
  );

export type permissionedObjectGetByObjectNameProps = Omit<
  RestfulShesha.GetProps<
    PermissionedObjectDtoAjaxResponse,
    AjaxResponseBase,
    PermissionedObjectGetByObjectNameQueryParams,
    void
  >,
  'queryParams'
>;
/**
 * Get protected object by name
 */
export const permissionedObjectGetByObjectName = (
  queryParams: PermissionedObjectGetByObjectNameQueryParams,
  props: permissionedObjectGetByObjectNameProps
) =>
  RestfulShesha.get<
    PermissionedObjectDtoAjaxResponse,
    AjaxResponseBase,
    PermissionedObjectGetByObjectNameQueryParams,
    void
  >(`/api/services/app/PermissionedObject/GetByObjectName`, queryParams, props);

export interface PermissionedObjectSetPermissionsQueryParams {
  objectName?: string;
  inherited?: boolean;
}

export type PermissionedObjectSetPermissionsProps = Omit<
  MutateProps<
    PermissionedObjectDtoAjaxResponse,
    AjaxResponseBase,
    PermissionedObjectSetPermissionsQueryParams,
    string[],
    void
  >,
  'path' | 'verb'
>;

/**
 * Set required permissions for protected object by name
 */
export const PermissionedObjectSetPermissions = (props: PermissionedObjectSetPermissionsProps) => (
  <Mutate<
    PermissionedObjectDtoAjaxResponse,
    AjaxResponseBase,
    PermissionedObjectSetPermissionsQueryParams,
    string[],
    void
  >
    verb="POST"
    path={`/api/services/app/PermissionedObject/SetPermissions`}
    {...props}
  />
);

export type UsePermissionedObjectSetPermissionsProps = Omit<
  UseMutateProps<
    PermissionedObjectDtoAjaxResponse,
    AjaxResponseBase,
    PermissionedObjectSetPermissionsQueryParams,
    string[],
    void
  >,
  'path' | 'verb'
>;

/**
 * Set required permissions for protected object by name
 */
export const usePermissionedObjectSetPermissions = (props: UsePermissionedObjectSetPermissionsProps) =>
  useMutate<
    PermissionedObjectDtoAjaxResponse,
    AjaxResponseBase,
    PermissionedObjectSetPermissionsQueryParams,
    string[],
    void
  >('POST', `/api/services/app/PermissionedObject/SetPermissions`, props);

export type permissionedObjectSetPermissionsProps = Omit<
  RestfulShesha.MutateProps<
    PermissionedObjectDtoAjaxResponse,
    AjaxResponseBase,
    PermissionedObjectSetPermissionsQueryParams,
    string[],
    void
  >,
  'data'
>;
/**
 * Set required permissions for protected object by name
 */
export const permissionedObjectSetPermissions = (data: string[], props: permissionedObjectSetPermissionsProps) =>
  RestfulShesha.mutate<
    PermissionedObjectDtoAjaxResponse,
    AjaxResponseBase,
    PermissionedObjectSetPermissionsQueryParams,
    string[],
    void
  >('POST', `/api/services/app/PermissionedObject/SetPermissions`, data, props);

export interface PermissionedObjectGetApiPermissionsQueryParams {
  serviceName?: string;
  actionName?: string;
}

export type PermissionedObjectGetApiPermissionsProps = Omit<
  GetProps<PermissionedObjectDtoAjaxResponse, AjaxResponseBase, PermissionedObjectGetApiPermissionsQueryParams, void>,
  'path'
>;

/**
 * Get protected object for API by Service and Action names
 */
export const PermissionedObjectGetApiPermissions = (props: PermissionedObjectGetApiPermissionsProps) => (
  <Get<PermissionedObjectDtoAjaxResponse, AjaxResponseBase, PermissionedObjectGetApiPermissionsQueryParams, void>
    path={`/api/services/app/PermissionedObject/GetApiPermissions`}
    {...props}
  />
);

export type UsePermissionedObjectGetApiPermissionsProps = Omit<
  UseGetProps<
    PermissionedObjectDtoAjaxResponse,
    AjaxResponseBase,
    PermissionedObjectGetApiPermissionsQueryParams,
    void
  >,
  'path'
>;

/**
 * Get protected object for API by Service and Action names
 */
export const usePermissionedObjectGetApiPermissions = (props: UsePermissionedObjectGetApiPermissionsProps) =>
  useGet<PermissionedObjectDtoAjaxResponse, AjaxResponseBase, PermissionedObjectGetApiPermissionsQueryParams, void>(
    `/api/services/app/PermissionedObject/GetApiPermissions`,
    props
  );

export type permissionedObjectGetApiPermissionsProps = Omit<
  RestfulShesha.GetProps<
    PermissionedObjectDtoAjaxResponse,
    AjaxResponseBase,
    PermissionedObjectGetApiPermissionsQueryParams,
    void
  >,
  'queryParams'
>;
/**
 * Get protected object for API by Service and Action names
 */
export const permissionedObjectGetApiPermissions = (
  queryParams: PermissionedObjectGetApiPermissionsQueryParams,
  props: permissionedObjectGetApiPermissionsProps
) =>
  RestfulShesha.get<
    PermissionedObjectDtoAjaxResponse,
    AjaxResponseBase,
    PermissionedObjectGetApiPermissionsQueryParams,
    void
  >(`/api/services/app/PermissionedObject/GetApiPermissions`, queryParams, props);

export type PermissionedObjectUpdateProps = Omit<
  MutateProps<PermissionedObjectDtoAjaxResponse, AjaxResponseBase, void, PermissionedObjectDto, void>,
  'path' | 'verb'
>;

/**
 * Update protected object data
 */
export const PermissionedObjectUpdate = (props: PermissionedObjectUpdateProps) => (
  <Mutate<PermissionedObjectDtoAjaxResponse, AjaxResponseBase, void, PermissionedObjectDto, void>
    verb="PUT"
    path={`/api/services/app/PermissionedObject/Update`}
    {...props}
  />
);

export type UsePermissionedObjectUpdateProps = Omit<
  UseMutateProps<PermissionedObjectDtoAjaxResponse, AjaxResponseBase, void, PermissionedObjectDto, void>,
  'path' | 'verb'
>;

/**
 * Update protected object data
 */
export const usePermissionedObjectUpdate = (props: UsePermissionedObjectUpdateProps) =>
  useMutate<PermissionedObjectDtoAjaxResponse, AjaxResponseBase, void, PermissionedObjectDto, void>(
    'PUT',
    `/api/services/app/PermissionedObject/Update`,
    props
  );

export type permissionedObjectUpdateProps = Omit<
  RestfulShesha.MutateProps<PermissionedObjectDtoAjaxResponse, AjaxResponseBase, void, PermissionedObjectDto, void>,
  'data'
>;
/**
 * Update protected object data
 */
export const permissionedObjectUpdate = (data: PermissionedObjectDto, props: permissionedObjectUpdateProps) =>
  RestfulShesha.mutate<PermissionedObjectDtoAjaxResponse, AjaxResponseBase, void, PermissionedObjectDto, void>(
    'PUT',
    `/api/services/app/PermissionedObject/Update`,
    data,
    props
  );

export interface PermissionedObjectSetApiPermissionsQueryParams {
  serviceName?: string;
  actionName?: string;
  inherited?: boolean;
}

export type PermissionedObjectSetApiPermissionsProps = Omit<
  MutateProps<
    PermissionedObjectDtoAjaxResponse,
    AjaxResponseBase,
    PermissionedObjectSetApiPermissionsQueryParams,
    string[],
    void
  >,
  'path' | 'verb'
>;

/**
 * Set required permissions for API by Service and Action names
 */
export const PermissionedObjectSetApiPermissions = (props: PermissionedObjectSetApiPermissionsProps) => (
  <Mutate<
    PermissionedObjectDtoAjaxResponse,
    AjaxResponseBase,
    PermissionedObjectSetApiPermissionsQueryParams,
    string[],
    void
  >
    verb="POST"
    path={`/api/services/app/PermissionedObject/SetApiPermissions`}
    {...props}
  />
);

export type UsePermissionedObjectSetApiPermissionsProps = Omit<
  UseMutateProps<
    PermissionedObjectDtoAjaxResponse,
    AjaxResponseBase,
    PermissionedObjectSetApiPermissionsQueryParams,
    string[],
    void
  >,
  'path' | 'verb'
>;

/**
 * Set required permissions for API by Service and Action names
 */
export const usePermissionedObjectSetApiPermissions = (props: UsePermissionedObjectSetApiPermissionsProps) =>
  useMutate<
    PermissionedObjectDtoAjaxResponse,
    AjaxResponseBase,
    PermissionedObjectSetApiPermissionsQueryParams,
    string[],
    void
  >('POST', `/api/services/app/PermissionedObject/SetApiPermissions`, props);

export type permissionedObjectSetApiPermissionsProps = Omit<
  RestfulShesha.MutateProps<
    PermissionedObjectDtoAjaxResponse,
    AjaxResponseBase,
    PermissionedObjectSetApiPermissionsQueryParams,
    string[],
    void
  >,
  'data'
>;
/**
 * Set required permissions for API by Service and Action names
 */
export const permissionedObjectSetApiPermissions = (data: string[], props: permissionedObjectSetApiPermissionsProps) =>
  RestfulShesha.mutate<
    PermissionedObjectDtoAjaxResponse,
    AjaxResponseBase,
    PermissionedObjectSetApiPermissionsQueryParams,
    string[],
    void
  >('POST', `/api/services/app/PermissionedObject/SetApiPermissions`, data, props);

export type PermissionedObjectClearCacheProps = Omit<MutateProps<void, unknown, void, void, void>, 'path' | 'verb'>;

/**
 * Clear protected objects cache
 */
export const PermissionedObjectClearCache = (props: PermissionedObjectClearCacheProps) => (
  <Mutate<void, unknown, void, void, void>
    verb="POST"
    path={`/api/services/app/PermissionedObject/ClearCache`}
    {...props}
  />
);

export type UsePermissionedObjectClearCacheProps = Omit<
  UseMutateProps<void, unknown, void, void, void>,
  'path' | 'verb'
>;

/**
 * Clear protected objects cache
 */
export const usePermissionedObjectClearCache = (props: UsePermissionedObjectClearCacheProps) =>
  useMutate<void, unknown, void, void, void>('POST', `/api/services/app/PermissionedObject/ClearCache`, props);

export type permissionedObjectClearCacheProps = Omit<
  RestfulShesha.MutateProps<void, unknown, void, void, void>,
  'data'
>;
/**
 * Clear protected objects cache
 */
export const permissionedObjectClearCache = (props: permissionedObjectClearCacheProps) =>
  RestfulShesha.mutate<void, unknown, void, void, void>(
    'POST',
    `/api/services/app/PermissionedObject/ClearCache`,
    undefined,
    props
  );

export interface PermissionedObjectGetQueryParams {
  id?: string;
}

export type PermissionedObjectGetProps = Omit<
  GetProps<PermissionedObjectDtoAjaxResponse, AjaxResponseBase, PermissionedObjectGetQueryParams, void>,
  'path'
>;

export const PermissionedObjectGet = (props: PermissionedObjectGetProps) => (
  <Get<PermissionedObjectDtoAjaxResponse, AjaxResponseBase, PermissionedObjectGetQueryParams, void>
    path={`/api/services/app/PermissionedObject/Get`}
    {...props}
  />
);

export type UsePermissionedObjectGetProps = Omit<
  UseGetProps<PermissionedObjectDtoAjaxResponse, AjaxResponseBase, PermissionedObjectGetQueryParams, void>,
  'path'
>;

export const usePermissionedObjectGet = (props: UsePermissionedObjectGetProps) =>
  useGet<PermissionedObjectDtoAjaxResponse, AjaxResponseBase, PermissionedObjectGetQueryParams, void>(
    `/api/services/app/PermissionedObject/Get`,
    props
  );

export type permissionedObjectGetProps = Omit<
  RestfulShesha.GetProps<PermissionedObjectDtoAjaxResponse, AjaxResponseBase, PermissionedObjectGetQueryParams, void>,
  'queryParams'
>;
export const permissionedObjectGet = (
  queryParams: PermissionedObjectGetQueryParams,
  props: permissionedObjectGetProps
) =>
  RestfulShesha.get<PermissionedObjectDtoAjaxResponse, AjaxResponseBase, PermissionedObjectGetQueryParams, void>(
    `/api/services/app/PermissionedObject/Get`,
    queryParams,
    props
  );

export interface PermissionedObjectGetAllQueryParams {
  sorting?: string;
  skipCount?: number;
  maxResultCount?: number;
}

export type PermissionedObjectGetAllProps = Omit<
  GetProps<
    PermissionedObjectDtoPagedResultDtoAjaxResponse,
    AjaxResponseBase,
    PermissionedObjectGetAllQueryParams,
    void
  >,
  'path'
>;

export const PermissionedObjectGetAll = (props: PermissionedObjectGetAllProps) => (
  <Get<PermissionedObjectDtoPagedResultDtoAjaxResponse, AjaxResponseBase, PermissionedObjectGetAllQueryParams, void>
    path={`/api/services/app/PermissionedObject/GetAll`}
    {...props}
  />
);

export type UsePermissionedObjectGetAllProps = Omit<
  UseGetProps<
    PermissionedObjectDtoPagedResultDtoAjaxResponse,
    AjaxResponseBase,
    PermissionedObjectGetAllQueryParams,
    void
  >,
  'path'
>;

export const usePermissionedObjectGetAll = (props: UsePermissionedObjectGetAllProps) =>
  useGet<PermissionedObjectDtoPagedResultDtoAjaxResponse, AjaxResponseBase, PermissionedObjectGetAllQueryParams, void>(
    `/api/services/app/PermissionedObject/GetAll`,
    props
  );

export type permissionedObjectGetAllProps = Omit<
  RestfulShesha.GetProps<
    PermissionedObjectDtoPagedResultDtoAjaxResponse,
    AjaxResponseBase,
    PermissionedObjectGetAllQueryParams,
    void
  >,
  'queryParams'
>;
export const permissionedObjectGetAll = (
  queryParams: PermissionedObjectGetAllQueryParams,
  props: permissionedObjectGetAllProps
) =>
  RestfulShesha.get<
    PermissionedObjectDtoPagedResultDtoAjaxResponse,
    AjaxResponseBase,
    PermissionedObjectGetAllQueryParams,
    void
  >(`/api/services/app/PermissionedObject/GetAll`, queryParams, props);

export type PermissionedObjectCreateProps = Omit<
  MutateProps<PermissionedObjectDtoAjaxResponse, AjaxResponseBase, void, PermissionedObjectDto, void>,
  'path' | 'verb'
>;

export const PermissionedObjectCreate = (props: PermissionedObjectCreateProps) => (
  <Mutate<PermissionedObjectDtoAjaxResponse, AjaxResponseBase, void, PermissionedObjectDto, void>
    verb="POST"
    path={`/api/services/app/PermissionedObject/Create`}
    {...props}
  />
);

export type UsePermissionedObjectCreateProps = Omit<
  UseMutateProps<PermissionedObjectDtoAjaxResponse, AjaxResponseBase, void, PermissionedObjectDto, void>,
  'path' | 'verb'
>;

export const usePermissionedObjectCreate = (props: UsePermissionedObjectCreateProps) =>
  useMutate<PermissionedObjectDtoAjaxResponse, AjaxResponseBase, void, PermissionedObjectDto, void>(
    'POST',
    `/api/services/app/PermissionedObject/Create`,
    props
  );

export type permissionedObjectCreateProps = Omit<
  RestfulShesha.MutateProps<PermissionedObjectDtoAjaxResponse, AjaxResponseBase, void, PermissionedObjectDto, void>,
  'data'
>;
export const permissionedObjectCreate = (data: PermissionedObjectDto, props: permissionedObjectCreateProps) =>
  RestfulShesha.mutate<PermissionedObjectDtoAjaxResponse, AjaxResponseBase, void, PermissionedObjectDto, void>(
    'POST',
    `/api/services/app/PermissionedObject/Create`,
    data,
    props
  );

export interface PermissionedObjectDeleteQueryParams {
  id?: string;
}

export type PermissionedObjectDeleteProps = Omit<
  MutateProps<void, unknown, PermissionedObjectDeleteQueryParams, void, void>,
  'path' | 'verb'
>;

export const PermissionedObjectDelete = (props: PermissionedObjectDeleteProps) => (
  <Mutate<void, unknown, PermissionedObjectDeleteQueryParams, void, void>
    verb="DELETE"
    path={`/api/services/app/PermissionedObject/Delete`}
    {...props}
  />
);

export type UsePermissionedObjectDeleteProps = Omit<
  UseMutateProps<void, unknown, PermissionedObjectDeleteQueryParams, void, void>,
  'path' | 'verb'
>;

export const usePermissionedObjectDelete = (props: UsePermissionedObjectDeleteProps) =>
  useMutate<void, unknown, PermissionedObjectDeleteQueryParams, void, void>(
    'DELETE',
    `/api/services/app/PermissionedObject/Delete`,
    { ...props }
  );

export type permissionedObjectDeleteProps = Omit<
  RestfulShesha.MutateProps<void, unknown, PermissionedObjectDeleteQueryParams, void, void>,
  'data'
>;
export const permissionedObjectDelete = (props: permissionedObjectDeleteProps) =>
  RestfulShesha.mutate<void, unknown, PermissionedObjectDeleteQueryParams, void, void>(
    'DELETE',
    `/api/services/app/PermissionedObject/Delete`,
    undefined,
    props
  );
