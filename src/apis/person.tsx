/* Generated by restful-react */

import React from "react";
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from "restful-react";

import * as RestfulShesha from "../utils/fetchers"
export const SPEC_VERSION = "v1"; 
export interface AjaxResponseBase {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
}

export interface DynamicDtoPersonGuid {
  id?: string;
  /**
   * List of form fields. Is used for partial updates. Contains a list of entity properties that should be updated. Leave empty to update all available entity fields
   */
  _formFields?: string[];
  deleterUserId?: number | null;
  photo?: string | null;
  lastName?: string;
  tenantId?: number | null;
  deletionTime?: string | null;
  emailAddress2?: string;
  dateOfBirth?: string | null;
  creatorUserId?: number | null;
  mobileNumber2?: string;
  emailAddress1?: string;
  title?: number | null;
  customShortName?: string;
  lastModifierUserId?: number | null;
  user?: number | null;
  identityNumber?: string;
  middleName?: string;
  fullName?: string;
  creationTime?: string | null;
  preferredContactMethod?: number | null;
  gender?: number | null;
  homeNumber?: string;
  address?: string | null;
  isDeleted?: boolean | null;
  workAddress?: string | null;
  firstName?: string;
  initials?: string;
  mobileNumber1?: string;
  lastModificationTime?: string | null;
  _className?: MetaDto;
}

export interface DynamicDtoPersonGuidAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: DynamicDtoPersonGuid;
}

export interface DynamicDtoPersonGuidPagedResultDto {
  items?: DynamicDtoPersonGuid[] | null;
  totalCount?: number;
}

export interface DynamicDtoPersonGuidPagedResultDtoAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: DynamicDtoPersonGuidPagedResultDto;
}

export interface ErrorInfo {
  code?: number;
  message?: string | null;
  details?: string | null;
  validationErrors?: ValidationErrorInfo[] | null;
}

export type JToken = JToken[];

export interface MetaDto {
  className?: string | null;
}

export interface PersonGraphQLDataResult {
  deleterUserId?: number | null;
  photo?: string | null;
  lastName?: string;
  tenantId?: number | null;
  deletionTime?: string | null;
  emailAddress2?: string;
  dateOfBirth?: string | null;
  creatorUserId?: number | null;
  mobileNumber2?: string;
  emailAddress1?: string;
  title?: number | null;
  customShortName?: string;
  lastModifierUserId?: number | null;
  user?: number | null;
  identityNumber?: string;
  middleName?: string;
  fullName?: string;
  creationTime?: string | null;
  preferredContactMethod?: number | null;
  gender?: number | null;
  homeNumber?: string;
  address?: string | null;
  isDeleted?: boolean | null;
  workAddress?: string | null;
  firstName?: string;
  initials?: string;
  mobileNumber1?: string;
  lastModificationTime?: string | null;
  _className?: MetaDto;
  _jObject?: {
  [key: string]: JToken;
};
  id?: string;
}

export interface PersonGraphQLDataResultAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: PersonGraphQLDataResult;
}

/**
 * NOTE: shape of the response depends on the `properties` argument
 */
export interface PersonPagedResultDtoGraphQLDataResult {
  totalCount?: number;
  items?: ProxyDynamicDtoPersonGuid[];
}

export interface PersonPagedResultDtoGraphQLDataResultAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: PersonPagedResultDtoGraphQLDataResult;
}

export interface ProxyDynamicDtoPersonGuid {
  id?: string;
  _jObject?: {
  [key: string]: JToken;
} | null;
  deleterUserId?: number | null;
  photo?: string | null;
  lastName?: string | null;
  tenantId?: number | null;
  deletionTime?: string | null;
  emailAddress2?: string | null;
  dateOfBirth?: string | null;
  creatorUserId?: number | null;
  mobileNumber2?: string | null;
  emailAddress1?: string | null;
  title?: number | null;
  customShortName?: string | null;
  lastModifierUserId?: number | null;
  user?: number | null;
  identityNumber?: string | null;
  middleName?: string | null;
  fullName?: string | null;
  creationTime?: string | null;
  preferredContactMethod?: number | null;
  gender?: number | null;
  homeNumber?: string | null;
  address?: string | null;
  isDeleted?: boolean | null;
  workAddress?: string | null;
  firstName?: string | null;
  initials?: string | null;
  mobileNumber1?: string | null;
  lastModificationTime?: string | null;
  _className?: MetaDto;
}

export interface ValidationErrorInfo {
  message?: string | null;
  members?: string[] | null;
}

export interface PersonGetQueryParams {
  /**
   * List of properties to fetch in GraphQL-like syntax. Supports nested properties
   */
  properties?: string;
  id?: string;
  /**
   * The requested API version
   */
  "api-version"?: string;
}

export type PersonGetProps = Omit<GetProps<DynamicDtoPersonGuidAjaxResponse, AjaxResponseBase, PersonGetQueryParams, void>, "path">;

export const PersonGet = (props: PersonGetProps) => (
  <Get<DynamicDtoPersonGuidAjaxResponse, AjaxResponseBase, PersonGetQueryParams, void>
    path={`/api/services/Shesha/Person/Get`}
    
    {...props}
  />
);

export type UsePersonGetProps = Omit<UseGetProps<DynamicDtoPersonGuidAjaxResponse, AjaxResponseBase, PersonGetQueryParams, void>, "path">;

export const usePersonGet = (props: UsePersonGetProps) => useGet<DynamicDtoPersonGuidAjaxResponse, AjaxResponseBase, PersonGetQueryParams, void>(`/api/services/Shesha/Person/Get`, props);

export type personGetProps = Omit<
    RestfulShesha.GetProps<DynamicDtoPersonGuidAjaxResponse, AjaxResponseBase, PersonGetQueryParams, void>,
    'queryParams'
  >;
        export const personGet = (queryParams: PersonGetQueryParams,
          props: personGetProps) => RestfulShesha.get<DynamicDtoPersonGuidAjaxResponse, AjaxResponseBase, PersonGetQueryParams, void>(`/api/services/Shesha/Person/Get`, queryParams, props);


export interface PersonUpdateGqlQueryParams {
  /**
   * List of properties to fetch in GraphQL-like syntax. Supports nested properties
   */
  properties?: string;
  /**
   * The requested API version
   */
  "api-version"?: string;
}

export type PersonUpdateGqlProps = Omit<MutateProps<PersonGraphQLDataResultAjaxResponse, AjaxResponseBase, PersonUpdateGqlQueryParams, DynamicDtoPersonGuid, void>, "path" | "verb">;

/**
 * Update entity data. 
 * NOTE: don't use on prod, will be merged with the `Update`endpoint soon
 */
export const PersonUpdateGql = (props: PersonUpdateGqlProps) => (
  <Mutate<PersonGraphQLDataResultAjaxResponse, AjaxResponseBase, PersonUpdateGqlQueryParams, DynamicDtoPersonGuid, void>
    verb="PUT"
    path={`/api/services/Shesha/Person/UpdateGql`}
    
    {...props}
  />
);

export type UsePersonUpdateGqlProps = Omit<UseMutateProps<PersonGraphQLDataResultAjaxResponse, AjaxResponseBase, PersonUpdateGqlQueryParams, DynamicDtoPersonGuid, void>, "path" | "verb">;

/**
 * Update entity data. 
 * NOTE: don't use on prod, will be merged with the `Update`endpoint soon
 */
export const usePersonUpdateGql = (props: UsePersonUpdateGqlProps) => useMutate<PersonGraphQLDataResultAjaxResponse, AjaxResponseBase, PersonUpdateGqlQueryParams, DynamicDtoPersonGuid, void>("PUT", `/api/services/Shesha/Person/UpdateGql`, props);

export type personUpdateGqlProps = Omit<
    RestfulShesha.MutateProps<PersonGraphQLDataResultAjaxResponse, AjaxResponseBase, PersonUpdateGqlQueryParams, DynamicDtoPersonGuid, void>,
    'data'
  >;
      /**
 * Update entity data. 
 * NOTE: don't use on prod, will be merged with the `Update`endpoint soon
 */
export const personUpdateGql = (data: DynamicDtoPersonGuid,props: personUpdateGqlProps) => RestfulShesha.mutate<PersonGraphQLDataResultAjaxResponse, AjaxResponseBase, PersonUpdateGqlQueryParams, DynamicDtoPersonGuid, void>("PUT", `/api/services/Shesha/Person/UpdateGql`, data, props);


export interface PersonUpdateQueryParams {
  /**
   * The requested API version
   */
  "api-version"?: string;
}

export type PersonUpdateProps = Omit<MutateProps<DynamicDtoPersonGuidAjaxResponse, AjaxResponseBase, PersonUpdateQueryParams, DynamicDtoPersonGuid, void>, "path" | "verb">;

export const PersonUpdate = (props: PersonUpdateProps) => (
  <Mutate<DynamicDtoPersonGuidAjaxResponse, AjaxResponseBase, PersonUpdateQueryParams, DynamicDtoPersonGuid, void>
    verb="PUT"
    path={`/api/services/Shesha/Person/Update`}
    
    {...props}
  />
);

export type UsePersonUpdateProps = Omit<UseMutateProps<DynamicDtoPersonGuidAjaxResponse, AjaxResponseBase, PersonUpdateQueryParams, DynamicDtoPersonGuid, void>, "path" | "verb">;

export const usePersonUpdate = (props: UsePersonUpdateProps) => useMutate<DynamicDtoPersonGuidAjaxResponse, AjaxResponseBase, PersonUpdateQueryParams, DynamicDtoPersonGuid, void>("PUT", `/api/services/Shesha/Person/Update`, props);

export type personUpdateProps = Omit<
    RestfulShesha.MutateProps<DynamicDtoPersonGuidAjaxResponse, AjaxResponseBase, PersonUpdateQueryParams, DynamicDtoPersonGuid, void>,
    'data'
  >;
      export const personUpdate = (data: DynamicDtoPersonGuid,props: personUpdateProps) => RestfulShesha.mutate<DynamicDtoPersonGuidAjaxResponse, AjaxResponseBase, PersonUpdateQueryParams, DynamicDtoPersonGuid, void>("PUT", `/api/services/Shesha/Person/Update`, data, props);


export interface PersonCreateGqlQueryParams {
  /**
   * List of properties to fetch in GraphQL-like syntax. Supports nested properties
   */
  properties?: string;
  /**
   * The requested API version
   */
  "api-version"?: string;
}

export type PersonCreateGqlProps = Omit<MutateProps<PersonGraphQLDataResultAjaxResponse, AjaxResponseBase, PersonCreateGqlQueryParams, DynamicDtoPersonGuid, void>, "path" | "verb">;

/**
 * Create entity.
 * NOTE: don't use on prod, will be merged with the `Update`endpoint soon
 */
export const PersonCreateGql = (props: PersonCreateGqlProps) => (
  <Mutate<PersonGraphQLDataResultAjaxResponse, AjaxResponseBase, PersonCreateGqlQueryParams, DynamicDtoPersonGuid, void>
    verb="POST"
    path={`/api/services/Shesha/Person/CreateGql`}
    
    {...props}
  />
);

export type UsePersonCreateGqlProps = Omit<UseMutateProps<PersonGraphQLDataResultAjaxResponse, AjaxResponseBase, PersonCreateGqlQueryParams, DynamicDtoPersonGuid, void>, "path" | "verb">;

/**
 * Create entity.
 * NOTE: don't use on prod, will be merged with the `Update`endpoint soon
 */
export const usePersonCreateGql = (props: UsePersonCreateGqlProps) => useMutate<PersonGraphQLDataResultAjaxResponse, AjaxResponseBase, PersonCreateGqlQueryParams, DynamicDtoPersonGuid, void>("POST", `/api/services/Shesha/Person/CreateGql`, props);

export type personCreateGqlProps = Omit<
    RestfulShesha.MutateProps<PersonGraphQLDataResultAjaxResponse, AjaxResponseBase, PersonCreateGqlQueryParams, DynamicDtoPersonGuid, void>,
    'data'
  >;
      /**
 * Create entity.
 * NOTE: don't use on prod, will be merged with the `Update`endpoint soon
 */
export const personCreateGql = (data: DynamicDtoPersonGuid,props: personCreateGqlProps) => RestfulShesha.mutate<PersonGraphQLDataResultAjaxResponse, AjaxResponseBase, PersonCreateGqlQueryParams, DynamicDtoPersonGuid, void>("POST", `/api/services/Shesha/Person/CreateGql`, data, props);


export interface PersonCreateQueryParams {
  /**
   * The requested API version
   */
  "api-version"?: string;
}

export type PersonCreateProps = Omit<MutateProps<DynamicDtoPersonGuidAjaxResponse, AjaxResponseBase, PersonCreateQueryParams, DynamicDtoPersonGuid, void>, "path" | "verb">;

export const PersonCreate = (props: PersonCreateProps) => (
  <Mutate<DynamicDtoPersonGuidAjaxResponse, AjaxResponseBase, PersonCreateQueryParams, DynamicDtoPersonGuid, void>
    verb="POST"
    path={`/api/services/Shesha/Person/Create`}
    
    {...props}
  />
);

export type UsePersonCreateProps = Omit<UseMutateProps<DynamicDtoPersonGuidAjaxResponse, AjaxResponseBase, PersonCreateQueryParams, DynamicDtoPersonGuid, void>, "path" | "verb">;

export const usePersonCreate = (props: UsePersonCreateProps) => useMutate<DynamicDtoPersonGuidAjaxResponse, AjaxResponseBase, PersonCreateQueryParams, DynamicDtoPersonGuid, void>("POST", `/api/services/Shesha/Person/Create`, props);

export type personCreateProps = Omit<
    RestfulShesha.MutateProps<DynamicDtoPersonGuidAjaxResponse, AjaxResponseBase, PersonCreateQueryParams, DynamicDtoPersonGuid, void>,
    'data'
  >;
      export const personCreate = (data: DynamicDtoPersonGuid,props: personCreateProps) => RestfulShesha.mutate<DynamicDtoPersonGuidAjaxResponse, AjaxResponseBase, PersonCreateQueryParams, DynamicDtoPersonGuid, void>("POST", `/api/services/Shesha/Person/Create`, data, props);


export interface PersonGetAllQueryParams {
  /**
   * Filter string in JsonLogic format
   */
  filter?: string;
  /**
   * Quick search string. Is used to search entities by text
   */
  quickSearch?: string;
  sorting?: string;
  skipCount?: number;
  maxResultCount?: number;
  /**
   * The requested API version
   */
  "api-version"?: string;
}

export type PersonGetAllProps = Omit<GetProps<DynamicDtoPersonGuidPagedResultDtoAjaxResponse, AjaxResponseBase, PersonGetAllQueryParams, void>, "path">;

export const PersonGetAll = (props: PersonGetAllProps) => (
  <Get<DynamicDtoPersonGuidPagedResultDtoAjaxResponse, AjaxResponseBase, PersonGetAllQueryParams, void>
    path={`/api/services/Shesha/Person/GetAll`}
    
    {...props}
  />
);

export type UsePersonGetAllProps = Omit<UseGetProps<DynamicDtoPersonGuidPagedResultDtoAjaxResponse, AjaxResponseBase, PersonGetAllQueryParams, void>, "path">;

export const usePersonGetAll = (props: UsePersonGetAllProps) => useGet<DynamicDtoPersonGuidPagedResultDtoAjaxResponse, AjaxResponseBase, PersonGetAllQueryParams, void>(`/api/services/Shesha/Person/GetAll`, props);

export type personGetAllProps = Omit<
    RestfulShesha.GetProps<DynamicDtoPersonGuidPagedResultDtoAjaxResponse, AjaxResponseBase, PersonGetAllQueryParams, void>,
    'queryParams'
  >;
        export const personGetAll = (queryParams: PersonGetAllQueryParams,
          props: personGetAllProps) => RestfulShesha.get<DynamicDtoPersonGuidPagedResultDtoAjaxResponse, AjaxResponseBase, PersonGetAllQueryParams, void>(`/api/services/Shesha/Person/GetAll`, queryParams, props);


export interface PersonQueryQueryParams {
  /**
   * List of properties to fetch in GraphQL-like syntax. Supports nested properties
   */
  properties?: string;
  id?: string;
  /**
   * The requested API version
   */
  "api-version"?: string;
}

export type PersonQueryProps = Omit<GetProps<PersonGraphQLDataResultAjaxResponse, AjaxResponseBase, PersonQueryQueryParams, void>, "path">;

/**
 * Query entity data. 
 * NOTE: don't use on prod, will be merged with the `Get`endpoint soon
 */
export const PersonQuery = (props: PersonQueryProps) => (
  <Get<PersonGraphQLDataResultAjaxResponse, AjaxResponseBase, PersonQueryQueryParams, void>
    path={`/api/services/Shesha/Person/Query`}
    
    {...props}
  />
);

export type UsePersonQueryProps = Omit<UseGetProps<PersonGraphQLDataResultAjaxResponse, AjaxResponseBase, PersonQueryQueryParams, void>, "path">;

/**
 * Query entity data. 
 * NOTE: don't use on prod, will be merged with the `Get`endpoint soon
 */
export const usePersonQuery = (props: UsePersonQueryProps) => useGet<PersonGraphQLDataResultAjaxResponse, AjaxResponseBase, PersonQueryQueryParams, void>(`/api/services/Shesha/Person/Query`, props);

export type personQueryProps = Omit<
    RestfulShesha.GetProps<PersonGraphQLDataResultAjaxResponse, AjaxResponseBase, PersonQueryQueryParams, void>,
    'queryParams'
  >;
        /**
 * Query entity data. 
 * NOTE: don't use on prod, will be merged with the `Get`endpoint soon
 */
export const personQuery = (queryParams: PersonQueryQueryParams,
          props: personQueryProps) => RestfulShesha.get<PersonGraphQLDataResultAjaxResponse, AjaxResponseBase, PersonQueryQueryParams, void>(`/api/services/Shesha/Person/Query`, queryParams, props);


export interface PersonQueryAllQueryParams {
  /**
   * List of properties to fetch in GraphQL-like syntax. Supports nested properties
   */
  properties?: string;
  /**
   * Filter string in JsonLogic format
   */
  filter?: string;
  /**
   * Quick search string. Is used to search entities by text
   */
  quickSearch?: string;
  sorting?: string;
  skipCount?: number;
  maxResultCount?: number;
  /**
   * The requested API version
   */
  "api-version"?: string;
}

export type PersonQueryAllProps = Omit<GetProps<PersonPagedResultDtoGraphQLDataResultAjaxResponse, AjaxResponseBase, PersonQueryAllQueryParams, void>, "path">;

/**
 * Query entities list
 * NOTE: don't use on prod, will be merged with the GetAll endpoint soon
 */
export const PersonQueryAll = (props: PersonQueryAllProps) => (
  <Get<PersonPagedResultDtoGraphQLDataResultAjaxResponse, AjaxResponseBase, PersonQueryAllQueryParams, void>
    path={`/api/services/Shesha/Person/QueryAll`}
    
    {...props}
  />
);

export type UsePersonQueryAllProps = Omit<UseGetProps<PersonPagedResultDtoGraphQLDataResultAjaxResponse, AjaxResponseBase, PersonQueryAllQueryParams, void>, "path">;

/**
 * Query entities list
 * NOTE: don't use on prod, will be merged with the GetAll endpoint soon
 */
export const usePersonQueryAll = (props: UsePersonQueryAllProps) => useGet<PersonPagedResultDtoGraphQLDataResultAjaxResponse, AjaxResponseBase, PersonQueryAllQueryParams, void>(`/api/services/Shesha/Person/QueryAll`, props);

export type personQueryAllProps = Omit<
    RestfulShesha.GetProps<PersonPagedResultDtoGraphQLDataResultAjaxResponse, AjaxResponseBase, PersonQueryAllQueryParams, void>,
    'queryParams'
  >;
        /**
 * Query entities list
 * NOTE: don't use on prod, will be merged with the GetAll endpoint soon
 */
export const personQueryAll = (queryParams: PersonQueryAllQueryParams,
          props: personQueryAllProps) => RestfulShesha.get<PersonPagedResultDtoGraphQLDataResultAjaxResponse, AjaxResponseBase, PersonQueryAllQueryParams, void>(`/api/services/Shesha/Person/QueryAll`, queryParams, props);


export interface PersonDeleteQueryParams {
  id?: string;
  /**
   * The requested API version
   */
  "api-version"?: string;
}

export type PersonDeleteProps = Omit<MutateProps<void, unknown, PersonDeleteQueryParams, void, void>, "path" | "verb">;

export const PersonDelete = (props: PersonDeleteProps) => (
  <Mutate<void, unknown, PersonDeleteQueryParams, void, void>
    verb="DELETE"
    path={`/api/services/Shesha/Person/Delete`}
    
    {...props}
  />
);

export type UsePersonDeleteProps = Omit<UseMutateProps<void, unknown, PersonDeleteQueryParams, void, void>, "path" | "verb">;

export const usePersonDelete = (props: UsePersonDeleteProps) => useMutate<void, unknown, PersonDeleteQueryParams, void, void>("DELETE", `/api/services/Shesha/Person/Delete`, {   ...props });

export type personDeleteProps = Omit<
    RestfulShesha.MutateProps<void, unknown, PersonDeleteQueryParams, void, void>,
    'data'
  >;
      export const personDelete = (props: personDeleteProps) => RestfulShesha.mutate<void, unknown, PersonDeleteQueryParams, void, void>("DELETE", `/api/services/Shesha/Person/Delete`, undefined, props);

