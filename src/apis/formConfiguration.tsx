/* Generated by restful-react */

import React from 'react';
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from 'restful-react';

import * as RestfulShesha from '../utils/fetchers';
export const SPEC_VERSION = 'v1';
export interface AjaxResponseBase {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
}

/**
 * Generic DTO of the simple autocomplete item
 */
export interface AutocompleteItemDto {
  value?: string | null;
  displayText?: string | null;
}

export interface AutocompleteItemDtoListAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: AutocompleteItemDto[] | null;
}

/**
 * Cancel version input
 */
export interface CancelVersionInput {
  /**
   * Id of the current version
   */
  id?: string;
}

/**
 * Status of the Shesha.Domain.ConfigurationItems.ConfigurationItem
 */
export type ConfigurationItemVersionStatus = 1 | 2 | 3 | 4 | 5;

/**
 * Copy for input
 */
export interface CopyInput {
  /**
   * Item id
   */
  itemId?: string;
  /**
   * Module Id
   */
  moduleId?: string;
  /**
   * Name
   */
  name?: string | null;
  /**
   * Label
   */
  label?: string | null;
  /**
   * Description
   */
  description?: string | null;
}

/**
 * Form configuration DTO
 */
export interface CreateFormConfigurationDto {
  id?: string;
  /**
   * Form path/id is used to identify a form
   */
  moduleId?: string | null;
  /**
   * Form name
   */
  name?: string | null;
  /**
   * Label
   */
  label?: string | null;
  /**
   * Description
   */
  description?: string | null;
  /**
   * Markup in JSON format
   */
  markup?: string | null;
  /**
   * Type of the form model
   */
  modelType?: string | null;
  /**
   * Type of form (index, detail etc)
   */
  type?: string | null;
  /**
   * Template that is used for the form creation
   */
  templateId?: string | null;
  /**
   * If true, indeicates that the form is a template
   */
  isTemplate?: boolean;
}

/**
 * Create new version input
 */
export interface CreateNewVersionInput {
  /**
   * Id of the current version
   */
  id?: string;
}

export interface ErrorInfo {
  code?: number;
  message?: string | null;
  details?: string | null;
  validationErrors?: ValidationErrorInfo[] | null;
}

export interface FileContentResultAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: string | null;
}

/**
 * Form configuration DTO
 */
export interface FormConfigurationDto {
  id?: string;
  /**
   * Module Id
   */
  moduleId?: string | null;
  /**
   * Origin id
   */
  originId?: string | null;
  /**
   * Module name
   */
  module?: string | null;
  /**
   * Form name
   */
  name?: string | null;
  /**
   * Label
   */
  label?: string | null;
  /**
   * Description
   */
  description?: string | null;
  /**
   * Markup in JSON format
   */
  markup?: string | null;
  /**
   * Type of the form model
   */
  modelType?: string | null;
  /**
   * Version number
   */
  versionNo?: number;
  /**
   * If true, indicates that this is a last version of the form
   */
  isLastVersion?: boolean;
  versionStatus?: ConfigurationItemVersionStatus;
  suppress?: boolean;
  /**
   * Cache MD5, is used for client-side caching
   */
  cacheMd5?: string | null;
}

export interface FormConfigurationDtoAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: FormConfigurationDto;
}

export interface FormConfigurationDtoPagedResultDto {
  items?: FormConfigurationDto[] | null;
  totalCount?: number;
}

export interface FormConfigurationDtoPagedResultDtoAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: FormConfigurationDtoPagedResultDto;
}

export interface FormConfigurationGraphQLDataResult {
  contentType?: string | null;
  serializerSettings?: {} | null;
  statusCode?: number | null;
  value?: {} | null;
}

export interface FormConfigurationGraphQLDataResultAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: FormConfigurationGraphQLDataResult;
}

export interface FormConfigurationPagedResultDtoGraphQLDataResult {
  contentType?: string | null;
  serializerSettings?: {} | null;
  statusCode?: number | null;
  value?: {} | null;
}

export interface FormConfigurationPagedResultDtoGraphQLDataResultAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: FormConfigurationPagedResultDtoGraphQLDataResult;
}

/**
 * Form update markup input
 */
export interface FormUpdateMarkupInput {
  id?: string;
  /**
   * Form markup (components) in JSON format
   */
  markup?: string | null;
}

/**
 * Move item to module input
 */
export interface MoveToModuleInput {
  /**
   * Item id
   */
  itemId?: string;
  /**
   * Module Id
   */
  moduleId?: string;
}

/**
 * Update configuration status import
 */
export interface UpdateConfigurationStatusInput {
  /**
   * Filter string in JsonLogic format
   */
  filter: string;
  status: ConfigurationItemVersionStatus;
}

/**
 * Form configuration DTO
 */
export interface UpdateFormConfigurationDto {
  id?: string;
  /**
   * Label
   */
  label?: string | null;
  /**
   * Description
   */
  description?: string | null;
  /**
   * Markup in JSON format
   */
  markup?: string | null;
  /**
   * Type of the form model
   */
  modelType?: string | null;
}

export interface ValidationErrorInfo {
  message?: string | null;
  members?: string[] | null;
}

export interface FormConfigurationGetByNameQueryParams {
  /**
   * Module name
   */
  module?: string;
  /**
   * Form name
   */
  name?: string;
  /**
   * Form version number. Last published form is used when missing
   */
  version?: number;
  /**
   * MD5 of the form configuration. Is used for the client side caching.
   * If specified, the application should compare the value received from the client with a local cache and return http response with code 304 (not changed)
   */
  md5?: string;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type FormConfigurationGetByNameProps = Omit<
  GetProps<FormConfigurationDtoAjaxResponse, AjaxResponseBase, FormConfigurationGetByNameQueryParams, void>,
  'path'
>;

/**
 * Get current form configuration by name
 */
export const FormConfigurationGetByName = (props: FormConfigurationGetByNameProps) => (
  <Get<FormConfigurationDtoAjaxResponse, AjaxResponseBase, FormConfigurationGetByNameQueryParams, void>
    path={`/api/services/Shesha/FormConfiguration/GetByName`}
    {...props}
  />
);

export type UseFormConfigurationGetByNameProps = Omit<
  UseGetProps<FormConfigurationDtoAjaxResponse, AjaxResponseBase, FormConfigurationGetByNameQueryParams, void>,
  'path'
>;

/**
 * Get current form configuration by name
 */
export const useFormConfigurationGetByName = (props: UseFormConfigurationGetByNameProps) =>
  useGet<FormConfigurationDtoAjaxResponse, AjaxResponseBase, FormConfigurationGetByNameQueryParams, void>(
    `/api/services/Shesha/FormConfiguration/GetByName`,
    props
  );

export type formConfigurationGetByNameProps = Omit<
  RestfulShesha.GetProps<
    FormConfigurationDtoAjaxResponse,
    AjaxResponseBase,
    FormConfigurationGetByNameQueryParams,
    void
  >,
  'queryParams'
>;
/**
 * Get current form configuration by name
 */
export const formConfigurationGetByName = (
  queryParams: FormConfigurationGetByNameQueryParams,
  props: formConfigurationGetByNameProps
) =>
  RestfulShesha.get<FormConfigurationDtoAjaxResponse, AjaxResponseBase, FormConfigurationGetByNameQueryParams, void>(
    `/api/services/Shesha/FormConfiguration/GetByName`,
    queryParams,
    props
  );

export interface FormConfigurationGetQueryParams {
  /**
   * Form configuration id
   */
  id?: string;
  /**
   * MD5 of the form configuration. Is used for the client side caching.
   * If specified, the application should compare the value received from the client with a local cache and return http response with code 304 (not changed)
   */
  md5?: string;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type FormConfigurationGetProps = Omit<
  GetProps<FormConfigurationDtoAjaxResponse, AjaxResponseBase, FormConfigurationGetQueryParams, void>,
  'path'
>;

export const FormConfigurationGet = (props: FormConfigurationGetProps) => (
  <Get<FormConfigurationDtoAjaxResponse, AjaxResponseBase, FormConfigurationGetQueryParams, void>
    path={`/api/services/Shesha/FormConfiguration/Get`}
    {...props}
  />
);

export type UseFormConfigurationGetProps = Omit<
  UseGetProps<FormConfigurationDtoAjaxResponse, AjaxResponseBase, FormConfigurationGetQueryParams, void>,
  'path'
>;

export const useFormConfigurationGet = (props: UseFormConfigurationGetProps) =>
  useGet<FormConfigurationDtoAjaxResponse, AjaxResponseBase, FormConfigurationGetQueryParams, void>(
    `/api/services/Shesha/FormConfiguration/Get`,
    props
  );

export type formConfigurationGetProps = Omit<
  RestfulShesha.GetProps<FormConfigurationDtoAjaxResponse, AjaxResponseBase, FormConfigurationGetQueryParams, void>,
  'queryParams'
>;
export const formConfigurationGet = (queryParams: FormConfigurationGetQueryParams, props: formConfigurationGetProps) =>
  RestfulShesha.get<FormConfigurationDtoAjaxResponse, AjaxResponseBase, FormConfigurationGetQueryParams, void>(
    `/api/services/Shesha/FormConfiguration/Get`,
    queryParams,
    props
  );

export interface FormConfigurationUpdateMarkupQueryParams {
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type FormConfigurationUpdateMarkupProps = Omit<
  MutateProps<void, unknown, FormConfigurationUpdateMarkupQueryParams, FormUpdateMarkupInput, void>,
  'path' | 'verb'
>;

/**
 * Update form markup
 */
export const FormConfigurationUpdateMarkup = (props: FormConfigurationUpdateMarkupProps) => (
  <Mutate<void, unknown, FormConfigurationUpdateMarkupQueryParams, FormUpdateMarkupInput, void>
    verb="PUT"
    path={`/api/services/Shesha/FormConfiguration/UpdateMarkup`}
    {...props}
  />
);

export type UseFormConfigurationUpdateMarkupProps = Omit<
  UseMutateProps<void, unknown, FormConfigurationUpdateMarkupQueryParams, FormUpdateMarkupInput, void>,
  'path' | 'verb'
>;

/**
 * Update form markup
 */
export const useFormConfigurationUpdateMarkup = (props: UseFormConfigurationUpdateMarkupProps) =>
  useMutate<void, unknown, FormConfigurationUpdateMarkupQueryParams, FormUpdateMarkupInput, void>(
    'PUT',
    `/api/services/Shesha/FormConfiguration/UpdateMarkup`,
    props
  );

export type formConfigurationUpdateMarkupProps = Omit<
  RestfulShesha.MutateProps<void, unknown, FormConfigurationUpdateMarkupQueryParams, FormUpdateMarkupInput, void>,
  'data'
>;
/**
 * Update form markup
 */
export const formConfigurationUpdateMarkup = (data: FormUpdateMarkupInput, props: formConfigurationUpdateMarkupProps) =>
  RestfulShesha.mutate<void, unknown, FormConfigurationUpdateMarkupQueryParams, FormUpdateMarkupInput, void>(
    'PUT',
    `/api/services/Shesha/FormConfiguration/UpdateMarkup`,
    data,
    props
  );

export interface FormConfigurationUpdateStatusQueryParams {
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type FormConfigurationUpdateStatusProps = Omit<
  MutateProps<void, unknown, FormConfigurationUpdateStatusQueryParams, UpdateConfigurationStatusInput, void>,
  'path' | 'verb'
>;

/**
 * Update form markup
 */
export const FormConfigurationUpdateStatus = (props: FormConfigurationUpdateStatusProps) => (
  <Mutate<void, unknown, FormConfigurationUpdateStatusQueryParams, UpdateConfigurationStatusInput, void>
    verb="PUT"
    path={`/api/services/Shesha/FormConfiguration/UpdateStatus`}
    {...props}
  />
);

export type UseFormConfigurationUpdateStatusProps = Omit<
  UseMutateProps<void, unknown, FormConfigurationUpdateStatusQueryParams, UpdateConfigurationStatusInput, void>,
  'path' | 'verb'
>;

/**
 * Update form markup
 */
export const useFormConfigurationUpdateStatus = (props: UseFormConfigurationUpdateStatusProps) =>
  useMutate<void, unknown, FormConfigurationUpdateStatusQueryParams, UpdateConfigurationStatusInput, void>(
    'PUT',
    `/api/services/Shesha/FormConfiguration/UpdateStatus`,
    props
  );

export type formConfigurationUpdateStatusProps = Omit<
  RestfulShesha.MutateProps<
    void,
    unknown,
    FormConfigurationUpdateStatusQueryParams,
    UpdateConfigurationStatusInput,
    void
  >,
  'data'
>;
/**
 * Update form markup
 */
export const formConfigurationUpdateStatus = (
  data: UpdateConfigurationStatusInput,
  props: formConfigurationUpdateStatusProps
) =>
  RestfulShesha.mutate<void, unknown, FormConfigurationUpdateStatusQueryParams, UpdateConfigurationStatusInput, void>(
    'PUT',
    `/api/services/Shesha/FormConfiguration/UpdateStatus`,
    data,
    props
  );

export interface FormConfigurationCreateQueryParams {
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type FormConfigurationCreateProps = Omit<
  MutateProps<
    FormConfigurationDtoAjaxResponse,
    AjaxResponseBase,
    FormConfigurationCreateQueryParams,
    CreateFormConfigurationDto,
    void
  >,
  'path' | 'verb'
>;

/**
 * Create new form configuration
 */
export const FormConfigurationCreate = (props: FormConfigurationCreateProps) => (
  <Mutate<
    FormConfigurationDtoAjaxResponse,
    AjaxResponseBase,
    FormConfigurationCreateQueryParams,
    CreateFormConfigurationDto,
    void
  >
    verb="POST"
    path={`/api/services/Shesha/FormConfiguration/Create`}
    {...props}
  />
);

export type UseFormConfigurationCreateProps = Omit<
  UseMutateProps<
    FormConfigurationDtoAjaxResponse,
    AjaxResponseBase,
    FormConfigurationCreateQueryParams,
    CreateFormConfigurationDto,
    void
  >,
  'path' | 'verb'
>;

/**
 * Create new form configuration
 */
export const useFormConfigurationCreate = (props: UseFormConfigurationCreateProps) =>
  useMutate<
    FormConfigurationDtoAjaxResponse,
    AjaxResponseBase,
    FormConfigurationCreateQueryParams,
    CreateFormConfigurationDto,
    void
  >('POST', `/api/services/Shesha/FormConfiguration/Create`, props);

export type formConfigurationCreateProps = Omit<
  RestfulShesha.MutateProps<
    FormConfigurationDtoAjaxResponse,
    AjaxResponseBase,
    FormConfigurationCreateQueryParams,
    CreateFormConfigurationDto,
    void
  >,
  'data'
>;
/**
 * Create new form configuration
 */
export const formConfigurationCreate = (data: CreateFormConfigurationDto, props: formConfigurationCreateProps) =>
  RestfulShesha.mutate<
    FormConfigurationDtoAjaxResponse,
    AjaxResponseBase,
    FormConfigurationCreateQueryParams,
    CreateFormConfigurationDto,
    void
  >('POST', `/api/services/Shesha/FormConfiguration/Create`, data, props);

export interface FormConfigurationCreateNewVersionQueryParams {
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type FormConfigurationCreateNewVersionProps = Omit<
  MutateProps<
    FormConfigurationDtoAjaxResponse,
    AjaxResponseBase,
    FormConfigurationCreateNewVersionQueryParams,
    CreateNewVersionInput,
    void
  >,
  'path' | 'verb'
>;

/**
 * Create new version of form configuration
 */
export const FormConfigurationCreateNewVersion = (props: FormConfigurationCreateNewVersionProps) => (
  <Mutate<
    FormConfigurationDtoAjaxResponse,
    AjaxResponseBase,
    FormConfigurationCreateNewVersionQueryParams,
    CreateNewVersionInput,
    void
  >
    verb="POST"
    path={`/api/services/Shesha/FormConfiguration/CreateNewVersion`}
    {...props}
  />
);

export type UseFormConfigurationCreateNewVersionProps = Omit<
  UseMutateProps<
    FormConfigurationDtoAjaxResponse,
    AjaxResponseBase,
    FormConfigurationCreateNewVersionQueryParams,
    CreateNewVersionInput,
    void
  >,
  'path' | 'verb'
>;

/**
 * Create new version of form configuration
 */
export const useFormConfigurationCreateNewVersion = (props: UseFormConfigurationCreateNewVersionProps) =>
  useMutate<
    FormConfigurationDtoAjaxResponse,
    AjaxResponseBase,
    FormConfigurationCreateNewVersionQueryParams,
    CreateNewVersionInput,
    void
  >('POST', `/api/services/Shesha/FormConfiguration/CreateNewVersion`, props);

export type formConfigurationCreateNewVersionProps = Omit<
  RestfulShesha.MutateProps<
    FormConfigurationDtoAjaxResponse,
    AjaxResponseBase,
    FormConfigurationCreateNewVersionQueryParams,
    CreateNewVersionInput,
    void
  >,
  'data'
>;
/**
 * Create new version of form configuration
 */
export const formConfigurationCreateNewVersion = (
  data: CreateNewVersionInput,
  props: formConfigurationCreateNewVersionProps
) =>
  RestfulShesha.mutate<
    FormConfigurationDtoAjaxResponse,
    AjaxResponseBase,
    FormConfigurationCreateNewVersionQueryParams,
    CreateNewVersionInput,
    void
  >('POST', `/api/services/Shesha/FormConfiguration/CreateNewVersion`, data, props);

export interface FormConfigurationCancelVersionQueryParams {
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type FormConfigurationCancelVersionProps = Omit<
  MutateProps<
    FormConfigurationDtoAjaxResponse,
    AjaxResponseBase,
    FormConfigurationCancelVersionQueryParams,
    CancelVersionInput,
    void
  >,
  'path' | 'verb'
>;

/**
 * Cancel version
 */
export const FormConfigurationCancelVersion = (props: FormConfigurationCancelVersionProps) => (
  <Mutate<
    FormConfigurationDtoAjaxResponse,
    AjaxResponseBase,
    FormConfigurationCancelVersionQueryParams,
    CancelVersionInput,
    void
  >
    verb="POST"
    path={`/api/services/Shesha/FormConfiguration/CancelVersion`}
    {...props}
  />
);

export type UseFormConfigurationCancelVersionProps = Omit<
  UseMutateProps<
    FormConfigurationDtoAjaxResponse,
    AjaxResponseBase,
    FormConfigurationCancelVersionQueryParams,
    CancelVersionInput,
    void
  >,
  'path' | 'verb'
>;

/**
 * Cancel version
 */
export const useFormConfigurationCancelVersion = (props: UseFormConfigurationCancelVersionProps) =>
  useMutate<
    FormConfigurationDtoAjaxResponse,
    AjaxResponseBase,
    FormConfigurationCancelVersionQueryParams,
    CancelVersionInput,
    void
  >('POST', `/api/services/Shesha/FormConfiguration/CancelVersion`, props);

export type formConfigurationCancelVersionProps = Omit<
  RestfulShesha.MutateProps<
    FormConfigurationDtoAjaxResponse,
    AjaxResponseBase,
    FormConfigurationCancelVersionQueryParams,
    CancelVersionInput,
    void
  >,
  'data'
>;
/**
 * Cancel version
 */
export const formConfigurationCancelVersion = (data: CancelVersionInput, props: formConfigurationCancelVersionProps) =>
  RestfulShesha.mutate<
    FormConfigurationDtoAjaxResponse,
    AjaxResponseBase,
    FormConfigurationCancelVersionQueryParams,
    CancelVersionInput,
    void
  >('POST', `/api/services/Shesha/FormConfiguration/CancelVersion`, data, props);

export interface FormConfigurationGetJsonQueryParams {
  id?: string;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type FormConfigurationGetJsonProps = Omit<
  GetProps<FileContentResultAjaxResponse, AjaxResponseBase, FormConfigurationGetJsonQueryParams, void>,
  'path'
>;

/**
 * Get form in JSON format
 */
export const FormConfigurationGetJson = (props: FormConfigurationGetJsonProps) => (
  <Get<FileContentResultAjaxResponse, AjaxResponseBase, FormConfigurationGetJsonQueryParams, void>
    path={`/api/services/Shesha/FormConfiguration/GetJson`}
    {...props}
  />
);

export type UseFormConfigurationGetJsonProps = Omit<
  UseGetProps<FileContentResultAjaxResponse, AjaxResponseBase, FormConfigurationGetJsonQueryParams, void>,
  'path'
>;

/**
 * Get form in JSON format
 */
export const useFormConfigurationGetJson = (props: UseFormConfigurationGetJsonProps) =>
  useGet<FileContentResultAjaxResponse, AjaxResponseBase, FormConfigurationGetJsonQueryParams, void>(
    `/api/services/Shesha/FormConfiguration/GetJson`,
    props
  );

export type formConfigurationGetJsonProps = Omit<
  RestfulShesha.GetProps<FileContentResultAjaxResponse, AjaxResponseBase, FormConfigurationGetJsonQueryParams, void>,
  'queryParams'
>;
/**
 * Get form in JSON format
 */
export const formConfigurationGetJson = (
  queryParams: FormConfigurationGetJsonQueryParams,
  props: formConfigurationGetJsonProps
) =>
  RestfulShesha.get<FileContentResultAjaxResponse, AjaxResponseBase, FormConfigurationGetJsonQueryParams, void>(
    `/api/services/Shesha/FormConfiguration/GetJson`,
    queryParams,
    props
  );

export interface FormConfigurationUpdateQueryParams {
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type FormConfigurationUpdateProps = Omit<
  MutateProps<
    FormConfigurationDtoAjaxResponse,
    AjaxResponseBase,
    FormConfigurationUpdateQueryParams,
    UpdateFormConfigurationDto,
    void
  >,
  'path' | 'verb'
>;

/**
 * Update form configuration
 */
export const FormConfigurationUpdate = (props: FormConfigurationUpdateProps) => (
  <Mutate<
    FormConfigurationDtoAjaxResponse,
    AjaxResponseBase,
    FormConfigurationUpdateQueryParams,
    UpdateFormConfigurationDto,
    void
  >
    verb="PUT"
    path={`/api/services/Shesha/FormConfiguration/Update`}
    {...props}
  />
);

export type UseFormConfigurationUpdateProps = Omit<
  UseMutateProps<
    FormConfigurationDtoAjaxResponse,
    AjaxResponseBase,
    FormConfigurationUpdateQueryParams,
    UpdateFormConfigurationDto,
    void
  >,
  'path' | 'verb'
>;

/**
 * Update form configuration
 */
export const useFormConfigurationUpdate = (props: UseFormConfigurationUpdateProps) =>
  useMutate<
    FormConfigurationDtoAjaxResponse,
    AjaxResponseBase,
    FormConfigurationUpdateQueryParams,
    UpdateFormConfigurationDto,
    void
  >('PUT', `/api/services/Shesha/FormConfiguration/Update`, props);

export type formConfigurationUpdateProps = Omit<
  RestfulShesha.MutateProps<
    FormConfigurationDtoAjaxResponse,
    AjaxResponseBase,
    FormConfigurationUpdateQueryParams,
    UpdateFormConfigurationDto,
    void
  >,
  'data'
>;
/**
 * Update form configuration
 */
export const formConfigurationUpdate = (data: UpdateFormConfigurationDto, props: formConfigurationUpdateProps) =>
  RestfulShesha.mutate<
    FormConfigurationDtoAjaxResponse,
    AjaxResponseBase,
    FormConfigurationUpdateQueryParams,
    UpdateFormConfigurationDto,
    void
  >('PUT', `/api/services/Shesha/FormConfiguration/Update`, data, props);

export interface FormConfigurationDeleteQueryParams {
  id?: string;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type FormConfigurationDeleteProps = Omit<
  MutateProps<void, unknown, FormConfigurationDeleteQueryParams, void, void>,
  'path' | 'verb'
>;

/**
 * Delete form
 */
export const FormConfigurationDelete = (props: FormConfigurationDeleteProps) => (
  <Mutate<void, unknown, FormConfigurationDeleteQueryParams, void, void>
    verb="DELETE"
    path={`/api/services/Shesha/FormConfiguration/Delete`}
    {...props}
  />
);

export type UseFormConfigurationDeleteProps = Omit<
  UseMutateProps<void, unknown, FormConfigurationDeleteQueryParams, void, void>,
  'path' | 'verb'
>;

/**
 * Delete form
 */
export const useFormConfigurationDelete = (props: UseFormConfigurationDeleteProps) =>
  useMutate<void, unknown, FormConfigurationDeleteQueryParams, void, void>(
    'DELETE',
    `/api/services/Shesha/FormConfiguration/Delete`,
    { ...props }
  );

export type formConfigurationDeleteProps = Omit<
  RestfulShesha.MutateProps<void, unknown, FormConfigurationDeleteQueryParams, void, void>,
  'data'
>;
/**
 * Delete form
 */
export const formConfigurationDelete = (props: formConfigurationDeleteProps) =>
  RestfulShesha.mutate<void, unknown, FormConfigurationDeleteQueryParams, void, void>(
    'DELETE',
    `/api/services/Shesha/FormConfiguration/Delete`,
    undefined,
    props
  );

export interface FormConfigurationMoveToModuleQueryParams {
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type FormConfigurationMoveToModuleProps = Omit<
  MutateProps<void, unknown, FormConfigurationMoveToModuleQueryParams, MoveToModuleInput, void>,
  'path' | 'verb'
>;

/**
 * Move form to another module
 */
export const FormConfigurationMoveToModule = (props: FormConfigurationMoveToModuleProps) => (
  <Mutate<void, unknown, FormConfigurationMoveToModuleQueryParams, MoveToModuleInput, void>
    verb="POST"
    path={`/api/services/Shesha/FormConfiguration/MoveToModule`}
    {...props}
  />
);

export type UseFormConfigurationMoveToModuleProps = Omit<
  UseMutateProps<void, unknown, FormConfigurationMoveToModuleQueryParams, MoveToModuleInput, void>,
  'path' | 'verb'
>;

/**
 * Move form to another module
 */
export const useFormConfigurationMoveToModule = (props: UseFormConfigurationMoveToModuleProps) =>
  useMutate<void, unknown, FormConfigurationMoveToModuleQueryParams, MoveToModuleInput, void>(
    'POST',
    `/api/services/Shesha/FormConfiguration/MoveToModule`,
    props
  );

export type formConfigurationMoveToModuleProps = Omit<
  RestfulShesha.MutateProps<void, unknown, FormConfigurationMoveToModuleQueryParams, MoveToModuleInput, void>,
  'data'
>;
/**
 * Move form to another module
 */
export const formConfigurationMoveToModule = (data: MoveToModuleInput, props: formConfigurationMoveToModuleProps) =>
  RestfulShesha.mutate<void, unknown, FormConfigurationMoveToModuleQueryParams, MoveToModuleInput, void>(
    'POST',
    `/api/services/Shesha/FormConfiguration/MoveToModule`,
    data,
    props
  );

export interface FormConfigurationCopyQueryParams {
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type FormConfigurationCopyProps = Omit<
  MutateProps<FormConfigurationDtoAjaxResponse, AjaxResponseBase, FormConfigurationCopyQueryParams, CopyInput, void>,
  'path' | 'verb'
>;

/**
 * Copy form
 */
export const FormConfigurationCopy = (props: FormConfigurationCopyProps) => (
  <Mutate<FormConfigurationDtoAjaxResponse, AjaxResponseBase, FormConfigurationCopyQueryParams, CopyInput, void>
    verb="POST"
    path={`/api/services/Shesha/FormConfiguration/Copy`}
    {...props}
  />
);

export type UseFormConfigurationCopyProps = Omit<
  UseMutateProps<FormConfigurationDtoAjaxResponse, AjaxResponseBase, FormConfigurationCopyQueryParams, CopyInput, void>,
  'path' | 'verb'
>;

/**
 * Copy form
 */
export const useFormConfigurationCopy = (props: UseFormConfigurationCopyProps) =>
  useMutate<FormConfigurationDtoAjaxResponse, AjaxResponseBase, FormConfigurationCopyQueryParams, CopyInput, void>(
    'POST',
    `/api/services/Shesha/FormConfiguration/Copy`,
    props
  );

export type formConfigurationCopyProps = Omit<
  RestfulShesha.MutateProps<
    FormConfigurationDtoAjaxResponse,
    AjaxResponseBase,
    FormConfigurationCopyQueryParams,
    CopyInput,
    void
  >,
  'data'
>;
/**
 * Copy form
 */
export const formConfigurationCopy = (data: CopyInput, props: formConfigurationCopyProps) =>
  RestfulShesha.mutate<
    FormConfigurationDtoAjaxResponse,
    AjaxResponseBase,
    FormConfigurationCopyQueryParams,
    CopyInput,
    void
  >('POST', `/api/services/Shesha/FormConfiguration/Copy`, data, props);

export interface FormConfigurationAutocompleteQueryParams {
  term?: string;
  selectedValue?: string;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type FormConfigurationAutocompleteProps = Omit<
  GetProps<AutocompleteItemDtoListAjaxResponse, AjaxResponseBase, FormConfigurationAutocompleteQueryParams, void>,
  'path'
>;

export const FormConfigurationAutocomplete = (props: FormConfigurationAutocompleteProps) => (
  <Get<AutocompleteItemDtoListAjaxResponse, AjaxResponseBase, FormConfigurationAutocompleteQueryParams, void>
    path={`/api/services/Shesha/FormConfiguration/Autocomplete`}
    {...props}
  />
);

export type UseFormConfigurationAutocompleteProps = Omit<
  UseGetProps<AutocompleteItemDtoListAjaxResponse, AjaxResponseBase, FormConfigurationAutocompleteQueryParams, void>,
  'path'
>;

export const useFormConfigurationAutocomplete = (props: UseFormConfigurationAutocompleteProps) =>
  useGet<AutocompleteItemDtoListAjaxResponse, AjaxResponseBase, FormConfigurationAutocompleteQueryParams, void>(
    `/api/services/Shesha/FormConfiguration/Autocomplete`,
    props
  );

export type formConfigurationAutocompleteProps = Omit<
  RestfulShesha.GetProps<
    AutocompleteItemDtoListAjaxResponse,
    AjaxResponseBase,
    FormConfigurationAutocompleteQueryParams,
    void
  >,
  'queryParams'
>;
export const formConfigurationAutocomplete = (
  queryParams: FormConfigurationAutocompleteQueryParams,
  props: formConfigurationAutocompleteProps
) =>
  RestfulShesha.get<
    AutocompleteItemDtoListAjaxResponse,
    AjaxResponseBase,
    FormConfigurationAutocompleteQueryParams,
    void
  >(`/api/services/Shesha/FormConfiguration/Autocomplete`, queryParams, props);

export interface FormConfigurationGetAllQueryParams {
  /**
   * Filter string in JsonLogic format
   */
  filter?: string;
  /**
   * Quick search string. Is used to search entities by text
   */
  quickSearch?: string;
  sorting?: string;
  skipCount?: number;
  maxResultCount?: number;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type FormConfigurationGetAllProps = Omit<
  GetProps<FormConfigurationDtoPagedResultDtoAjaxResponse, AjaxResponseBase, FormConfigurationGetAllQueryParams, void>,
  'path'
>;

export const FormConfigurationGetAll = (props: FormConfigurationGetAllProps) => (
  <Get<FormConfigurationDtoPagedResultDtoAjaxResponse, AjaxResponseBase, FormConfigurationGetAllQueryParams, void>
    path={`/api/services/Shesha/FormConfiguration/GetAll`}
    {...props}
  />
);

export type UseFormConfigurationGetAllProps = Omit<
  UseGetProps<
    FormConfigurationDtoPagedResultDtoAjaxResponse,
    AjaxResponseBase,
    FormConfigurationGetAllQueryParams,
    void
  >,
  'path'
>;

export const useFormConfigurationGetAll = (props: UseFormConfigurationGetAllProps) =>
  useGet<FormConfigurationDtoPagedResultDtoAjaxResponse, AjaxResponseBase, FormConfigurationGetAllQueryParams, void>(
    `/api/services/Shesha/FormConfiguration/GetAll`,
    props
  );

export type formConfigurationGetAllProps = Omit<
  RestfulShesha.GetProps<
    FormConfigurationDtoPagedResultDtoAjaxResponse,
    AjaxResponseBase,
    FormConfigurationGetAllQueryParams,
    void
  >,
  'queryParams'
>;
export const formConfigurationGetAll = (
  queryParams: FormConfigurationGetAllQueryParams,
  props: formConfigurationGetAllProps
) =>
  RestfulShesha.get<
    FormConfigurationDtoPagedResultDtoAjaxResponse,
    AjaxResponseBase,
    FormConfigurationGetAllQueryParams,
    void
  >(`/api/services/Shesha/FormConfiguration/GetAll`, queryParams, props);

export interface FormConfigurationQueryQueryParams {
  /**
   * List of properties to fetch in GraphQL-like syntax. Supports nested properties
   */
  properties?: string;
  id?: string;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type FormConfigurationQueryProps = Omit<
  GetProps<FormConfigurationGraphQLDataResultAjaxResponse, AjaxResponseBase, FormConfigurationQueryQueryParams, void>,
  'path'
>;

/**
 * Query entity data.
 * NOTE: don't use on prod, will be merged with the `Get`endpoint soon
 */
export const FormConfigurationQuery = (props: FormConfigurationQueryProps) => (
  <Get<FormConfigurationGraphQLDataResultAjaxResponse, AjaxResponseBase, FormConfigurationQueryQueryParams, void>
    path={`/api/services/Shesha/FormConfiguration/Query`}
    {...props}
  />
);

export type UseFormConfigurationQueryProps = Omit<
  UseGetProps<
    FormConfigurationGraphQLDataResultAjaxResponse,
    AjaxResponseBase,
    FormConfigurationQueryQueryParams,
    void
  >,
  'path'
>;

/**
 * Query entity data.
 * NOTE: don't use on prod, will be merged with the `Get`endpoint soon
 */
export const useFormConfigurationQuery = (props: UseFormConfigurationQueryProps) =>
  useGet<FormConfigurationGraphQLDataResultAjaxResponse, AjaxResponseBase, FormConfigurationQueryQueryParams, void>(
    `/api/services/Shesha/FormConfiguration/Query`,
    props
  );

export type formConfigurationQueryProps = Omit<
  RestfulShesha.GetProps<
    FormConfigurationGraphQLDataResultAjaxResponse,
    AjaxResponseBase,
    FormConfigurationQueryQueryParams,
    void
  >,
  'queryParams'
>;
/**
 * Query entity data.
 * NOTE: don't use on prod, will be merged with the `Get`endpoint soon
 */
export const formConfigurationQuery = (
  queryParams: FormConfigurationQueryQueryParams,
  props: formConfigurationQueryProps
) =>
  RestfulShesha.get<
    FormConfigurationGraphQLDataResultAjaxResponse,
    AjaxResponseBase,
    FormConfigurationQueryQueryParams,
    void
  >(`/api/services/Shesha/FormConfiguration/Query`, queryParams, props);

export interface FormConfigurationQueryAllQueryParams {
  /**
   * List of properties to fetch in GraphQL-like syntax. Supports nested properties
   */
  properties?: string;
  /**
   * Filter string in JsonLogic format
   */
  filter?: string;
  /**
   * Quick search string. Is used to search entities by text
   */
  quickSearch?: string;
  sorting?: string;
  skipCount?: number;
  maxResultCount?: number;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type FormConfigurationQueryAllProps = Omit<
  GetProps<
    FormConfigurationPagedResultDtoGraphQLDataResultAjaxResponse,
    AjaxResponseBase,
    FormConfigurationQueryAllQueryParams,
    void
  >,
  'path'
>;

/**
 * Query entities list
 * NOTE: don't use on prod, will be merged with the GetAll endpoint soon
 */
export const FormConfigurationQueryAll = (props: FormConfigurationQueryAllProps) => (
  <Get<
    FormConfigurationPagedResultDtoGraphQLDataResultAjaxResponse,
    AjaxResponseBase,
    FormConfigurationQueryAllQueryParams,
    void
  >
    path={`/api/services/Shesha/FormConfiguration/QueryAll`}
    {...props}
  />
);

export type UseFormConfigurationQueryAllProps = Omit<
  UseGetProps<
    FormConfigurationPagedResultDtoGraphQLDataResultAjaxResponse,
    AjaxResponseBase,
    FormConfigurationQueryAllQueryParams,
    void
  >,
  'path'
>;

/**
 * Query entities list
 * NOTE: don't use on prod, will be merged with the GetAll endpoint soon
 */
export const useFormConfigurationQueryAll = (props: UseFormConfigurationQueryAllProps) =>
  useGet<
    FormConfigurationPagedResultDtoGraphQLDataResultAjaxResponse,
    AjaxResponseBase,
    FormConfigurationQueryAllQueryParams,
    void
  >(`/api/services/Shesha/FormConfiguration/QueryAll`, props);

export type formConfigurationQueryAllProps = Omit<
  RestfulShesha.GetProps<
    FormConfigurationPagedResultDtoGraphQLDataResultAjaxResponse,
    AjaxResponseBase,
    FormConfigurationQueryAllQueryParams,
    void
  >,
  'queryParams'
>;
/**
 * Query entities list
 * NOTE: don't use on prod, will be merged with the GetAll endpoint soon
 */
export const formConfigurationQueryAll = (
  queryParams: FormConfigurationQueryAllQueryParams,
  props: formConfigurationQueryAllProps
) =>
  RestfulShesha.get<
    FormConfigurationPagedResultDtoGraphQLDataResultAjaxResponse,
    AjaxResponseBase,
    FormConfigurationQueryAllQueryParams,
    void
  >(`/api/services/Shesha/FormConfiguration/QueryAll`, queryParams, props);
